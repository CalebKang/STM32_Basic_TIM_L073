
STM32_Basic_TIM_L073.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001360  08001360  00011360  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001384  08001384  00011384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001388  08001388  00011388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800138c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  20000004  08001390  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000009c  08001390  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000087d6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001707  00000000  00000000  00028802  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000487f  00000000  00000000  00029f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005d8  00000000  00000000  0002e788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000325e  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002394  00000000  00000000  000328d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034c6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010fc  00000000  00000000  00034ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001348 	.word	0x08001348

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001348 	.word	0x08001348

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_Init>:
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000234:	2340      	movs	r3, #64	; 0x40
 8000236:	4a08      	ldr	r2, [pc, #32]	; (8000258 <HAL_Init+0x24>)
{
 8000238:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800023a:	6811      	ldr	r1, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800023c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800023e:	430b      	orrs	r3, r1
 8000240:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000242:	f000 ffb7 	bl	80011b4 <HAL_InitTick>
 8000246:	1e04      	subs	r4, r0, #0
 8000248:	d103      	bne.n	8000252 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f000 ff71 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800024e:	0020      	movs	r0, r4
 8000250:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000252:	2401      	movs	r4, #1
 8000254:	e7fb      	b.n	800024e <HAL_Init+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40022000 	.word	0x40022000

0800025c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800025c:	4a02      	ldr	r2, [pc, #8]	; (8000268 <HAL_IncTick+0xc>)
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000020 	.word	0x20000020

0800026c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_GetTick+0x8>)
 800026e:	6818      	ldr	r0, [r3, #0]
}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000020 	.word	0x20000020

08000278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000278:	b570      	push	{r4, r5, r6, lr}
 800027a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800027c:	f7ff fff6 	bl	800026c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000280:	1c63      	adds	r3, r4, #1
 8000282:	1e5a      	subs	r2, r3, #1
 8000284:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000286:	0005      	movs	r5, r0
    wait++;
 8000288:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800028a:	f7ff ffef 	bl	800026c <HAL_GetTick>
 800028e:	1b40      	subs	r0, r0, r5
 8000290:	4284      	cmp	r4, r0
 8000292:	d8fa      	bhi.n	800028a <HAL_Delay+0x12>
  {
  }
}
 8000294:	bd70      	pop	{r4, r5, r6, pc}
	...

08000298 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800029c:	2800      	cmp	r0, #0
 800029e:	da14      	bge.n	80002ca <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a0:	230f      	movs	r3, #15
 80002a2:	b2c0      	uxtb	r0, r0
 80002a4:	4003      	ands	r3, r0
 80002a6:	3b08      	subs	r3, #8
 80002a8:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <HAL_NVIC_SetPriority+0x58>)
 80002aa:	089b      	lsrs	r3, r3, #2
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	189b      	adds	r3, r3, r2
 80002b0:	2203      	movs	r2, #3
 80002b2:	4010      	ands	r0, r2
 80002b4:	4090      	lsls	r0, r2
 80002b6:	32fc      	adds	r2, #252	; 0xfc
 80002b8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002be:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c0:	69dc      	ldr	r4, [r3, #28]
 80002c2:	43ac      	bics	r4, r5
 80002c4:	4321      	orrs	r1, r4
 80002c6:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002c8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ca:	2503      	movs	r5, #3
 80002cc:	0883      	lsrs	r3, r0, #2
 80002ce:	4028      	ands	r0, r5
 80002d0:	40a8      	lsls	r0, r5
 80002d2:	35fc      	adds	r5, #252	; 0xfc
 80002d4:	002e      	movs	r6, r5
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_NVIC_SetPriority+0x5c>)
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	189b      	adds	r3, r3, r2
 80002dc:	22c0      	movs	r2, #192	; 0xc0
 80002de:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e0:	4029      	ands	r1, r5
 80002e2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	0092      	lsls	r2, r2, #2
 80002e6:	589c      	ldr	r4, [r3, r2]
 80002e8:	43b4      	bics	r4, r6
 80002ea:	4321      	orrs	r1, r4
 80002ec:	5099      	str	r1, [r3, r2]
 80002ee:	e7eb      	b.n	80002c8 <HAL_NVIC_SetPriority+0x30>
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f8:	231f      	movs	r3, #31
 80002fa:	4018      	ands	r0, r3
 80002fc:	3b1e      	subs	r3, #30
 80002fe:	4083      	lsls	r3, r0
 8000300:	4a01      	ldr	r2, [pc, #4]	; (8000308 <HAL_NVIC_EnableIRQ+0x10>)
 8000302:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000304:	4770      	bx	lr
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	e000e100 	.word	0xe000e100

0800030c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800030e:	4a55      	ldr	r2, [pc, #340]	; (8000464 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000310:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000312:	1882      	adds	r2, r0, r2
 8000314:	1e54      	subs	r4, r2, #1
 8000316:	41a2      	sbcs	r2, r4
{
 8000318:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800031a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800031c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800031e:	3205      	adds	r2, #5
 8000320:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000322:	9a01      	ldr	r2, [sp, #4]
 8000324:	40da      	lsrs	r2, r3
 8000326:	d101      	bne.n	800032c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000328:	b005      	add	sp, #20
 800032a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800032c:	2501      	movs	r5, #1
 800032e:	409d      	lsls	r5, r3
 8000330:	9a01      	ldr	r2, [sp, #4]
 8000332:	402a      	ands	r2, r5
 8000334:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000336:	d100      	bne.n	800033a <HAL_GPIO_Init+0x2e>
 8000338:	e091      	b.n	800045e <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800033a:	684a      	ldr	r2, [r1, #4]
 800033c:	4694      	mov	ip, r2
 800033e:	2210      	movs	r2, #16
 8000340:	4664      	mov	r4, ip
 8000342:	4394      	bics	r4, r2
 8000344:	0022      	movs	r2, r4
 8000346:	3c01      	subs	r4, #1
 8000348:	2a02      	cmp	r2, #2
 800034a:	d11f      	bne.n	800038c <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800034c:	2407      	movs	r4, #7
 800034e:	270f      	movs	r7, #15
 8000350:	401c      	ands	r4, r3
 8000352:	00a4      	lsls	r4, r4, #2
 8000354:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000356:	08da      	lsrs	r2, r3, #3
 8000358:	0092      	lsls	r2, r2, #2
 800035a:	1882      	adds	r2, r0, r2
 800035c:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800035e:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000360:	690f      	ldr	r7, [r1, #16]
 8000362:	40a7      	lsls	r7, r4
 8000364:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000366:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000368:	2403      	movs	r4, #3
 800036a:	005e      	lsls	r6, r3, #1
 800036c:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800036e:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000370:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000372:	68cc      	ldr	r4, [r1, #12]
 8000374:	40b4      	lsls	r4, r6
 8000376:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000378:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800037a:	4662      	mov	r2, ip
 800037c:	06d2      	lsls	r2, r2, #27
 800037e:	0fd2      	lsrs	r2, r2, #31
 8000380:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8000382:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000384:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000386:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000388:	6042      	str	r2, [r0, #4]
 800038a:	e001      	b.n	8000390 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800038c:	2c01      	cmp	r4, #1
 800038e:	d9eb      	bls.n	8000368 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000390:	2603      	movs	r6, #3
 8000392:	0034      	movs	r4, r6
 8000394:	005d      	lsls	r5, r3, #1
 8000396:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000398:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800039a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039c:	4032      	ands	r2, r6
 800039e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003a0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003a2:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003a6:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80003a8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80003aa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80003ac:	688a      	ldr	r2, [r1, #8]
 80003ae:	40aa      	lsls	r2, r5
 80003b0:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003b2:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80003b4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003b6:	00d2      	lsls	r2, r2, #3
 80003b8:	d551      	bpl.n	800045e <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	2501      	movs	r5, #1
 80003bc:	4c2a      	ldr	r4, [pc, #168]	; (8000468 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003be:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003c2:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003c4:	001d      	movs	r5, r3
 80003c6:	4035      	ands	r5, r6
 80003c8:	00ad      	lsls	r5, r5, #2
 80003ca:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003cc:	6362      	str	r2, [r4, #52]	; 0x34
 80003ce:	4a27      	ldr	r2, [pc, #156]	; (800046c <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80003d0:	089c      	lsrs	r4, r3, #2
 80003d2:	00a4      	lsls	r4, r4, #2
 80003d4:	18a4      	adds	r4, r4, r2
 80003d6:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003d8:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80003da:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003dc:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80003de:	05ff      	lsls	r7, r7, #23
 80003e0:	2200      	movs	r2, #0
 80003e2:	42b8      	cmp	r0, r7
 80003e4:	d010      	beq.n	8000408 <HAL_GPIO_Init+0xfc>
 80003e6:	4f22      	ldr	r7, [pc, #136]	; (8000470 <HAL_GPIO_Init+0x164>)
 80003e8:	3201      	adds	r2, #1
 80003ea:	42b8      	cmp	r0, r7
 80003ec:	d00c      	beq.n	8000408 <HAL_GPIO_Init+0xfc>
 80003ee:	4f21      	ldr	r7, [pc, #132]	; (8000474 <HAL_GPIO_Init+0x168>)
 80003f0:	3201      	adds	r2, #1
 80003f2:	42b8      	cmp	r0, r7
 80003f4:	d008      	beq.n	8000408 <HAL_GPIO_Init+0xfc>
 80003f6:	4f20      	ldr	r7, [pc, #128]	; (8000478 <HAL_GPIO_Init+0x16c>)
 80003f8:	0032      	movs	r2, r6
 80003fa:	42b8      	cmp	r0, r7
 80003fc:	d004      	beq.n	8000408 <HAL_GPIO_Init+0xfc>
 80003fe:	4e1f      	ldr	r6, [pc, #124]	; (800047c <HAL_GPIO_Init+0x170>)
 8000400:	3201      	adds	r2, #1
 8000402:	42b0      	cmp	r0, r6
 8000404:	d000      	beq.n	8000408 <HAL_GPIO_Init+0xfc>
 8000406:	9a03      	ldr	r2, [sp, #12]
 8000408:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800040a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800040c:	9d02      	ldr	r5, [sp, #8]
 800040e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000410:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000412:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000414:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000416:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000418:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800041a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800041c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800041e:	03ff      	lsls	r7, r7, #15
 8000420:	d401      	bmi.n	8000426 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000422:	0035      	movs	r5, r6
 8000424:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000426:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000428:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800042a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800042c:	9d00      	ldr	r5, [sp, #0]
 800042e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000430:	03bf      	lsls	r7, r7, #14
 8000432:	d401      	bmi.n	8000438 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000434:	0035      	movs	r5, r6
 8000436:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000438:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800043a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800043c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800043e:	9d00      	ldr	r5, [sp, #0]
 8000440:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000442:	02ff      	lsls	r7, r7, #11
 8000444:	d401      	bmi.n	800044a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000446:	0035      	movs	r5, r6
 8000448:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800044a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800044c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800044e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000450:	9e00      	ldr	r6, [sp, #0]
 8000452:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000454:	02bf      	lsls	r7, r7, #10
 8000456:	d401      	bmi.n	800045c <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8000458:	4025      	ands	r5, r4
 800045a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800045c:	60d6      	str	r6, [r2, #12]
    position++;
 800045e:	3301      	adds	r3, #1
 8000460:	e75f      	b.n	8000322 <HAL_GPIO_Init+0x16>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	afffe400 	.word	0xafffe400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000
 8000470:	50000400 	.word	0x50000400
 8000474:	50000800 	.word	0x50000800
 8000478:	50000c00 	.word	0x50000c00
 800047c:	50001000 	.word	0x50001000
 8000480:	40010400 	.word	0x40010400

08000484 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000484:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000488:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800048a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800048c:	400a      	ands	r2, r1
 800048e:	2a08      	cmp	r2, #8
 8000490:	d026      	beq.n	80004e0 <HAL_RCC_GetSysClockFreq+0x5c>
 8000492:	2a0c      	cmp	r2, #12
 8000494:	d006      	beq.n	80004a4 <HAL_RCC_GetSysClockFreq+0x20>
 8000496:	2a04      	cmp	r2, #4
 8000498:	d11a      	bne.n	80004d0 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	06db      	lsls	r3, r3, #27
 800049e:	d421      	bmi.n	80004e4 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80004a0:	4812      	ldr	r0, [pc, #72]	; (80004ec <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80004a2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80004a4:	028a      	lsls	r2, r1, #10
 80004a6:	4812      	ldr	r0, [pc, #72]	; (80004f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80004a8:	0f12      	lsrs	r2, r2, #28
 80004aa:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004ac:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004ae:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004b0:	0f89      	lsrs	r1, r1, #30
 80004b2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004b4:	03c0      	lsls	r0, r0, #15
 80004b6:	d504      	bpl.n	80004c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80004b8:	480e      	ldr	r0, [pc, #56]	; (80004f4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80004ba:	4350      	muls	r0, r2
 80004bc:	f7ff fe2e 	bl	800011c <__udivsi3>
 80004c0:	e7ef      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	06db      	lsls	r3, r3, #27
 80004c6:	d501      	bpl.n	80004cc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <HAL_RCC_GetSysClockFreq+0x74>)
 80004ca:	e7f6      	b.n	80004ba <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <HAL_RCC_GetSysClockFreq+0x68>)
 80004ce:	e7f4      	b.n	80004ba <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004d0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80004d2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004d4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80004d6:	041b      	lsls	r3, r3, #16
 80004d8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004da:	3301      	adds	r3, #1
 80004dc:	4098      	lsls	r0, r3
 80004de:	e7e0      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <HAL_RCC_GetSysClockFreq+0x70>)
 80004e2:	e7de      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80004e6:	e7dc      	b.n	80004a2 <HAL_RCC_GetSysClockFreq+0x1e>
 80004e8:	40021000 	.word	0x40021000
 80004ec:	00f42400 	.word	0x00f42400
 80004f0:	08001378 	.word	0x08001378
 80004f4:	007a1200 	.word	0x007a1200
 80004f8:	003d0900 	.word	0x003d0900

080004fc <HAL_RCC_OscConfig>:
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	0005      	movs	r5, r0
 8000500:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000502:	2800      	cmp	r0, #0
 8000504:	d102      	bne.n	800050c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
}
 8000508:	b007      	add	sp, #28
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800050c:	230c      	movs	r3, #12
 800050e:	4cc2      	ldr	r4, [pc, #776]	; (8000818 <HAL_RCC_OscConfig+0x31c>)
 8000510:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000512:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000514:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	025b      	lsls	r3, r3, #9
 800051a:	401a      	ands	r2, r3
 800051c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051e:	6802      	ldr	r2, [r0, #0]
 8000520:	07d2      	lsls	r2, r2, #31
 8000522:	d441      	bmi.n	80005a8 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	079b      	lsls	r3, r3, #30
 8000528:	d500      	bpl.n	800052c <HAL_RCC_OscConfig+0x30>
 800052a:	e087      	b.n	800063c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800052c:	682b      	ldr	r3, [r5, #0]
 800052e:	06db      	lsls	r3, r3, #27
 8000530:	d528      	bpl.n	8000584 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000532:	2e00      	cmp	r6, #0
 8000534:	d000      	beq.n	8000538 <HAL_RCC_OscConfig+0x3c>
 8000536:	e0e1      	b.n	80006fc <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000538:	6823      	ldr	r3, [r4, #0]
 800053a:	059b      	lsls	r3, r3, #22
 800053c:	d502      	bpl.n	8000544 <HAL_RCC_OscConfig+0x48>
 800053e:	69eb      	ldr	r3, [r5, #28]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0e0      	beq.n	8000506 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000544:	6862      	ldr	r2, [r4, #4]
 8000546:	49b5      	ldr	r1, [pc, #724]	; (800081c <HAL_RCC_OscConfig+0x320>)
 8000548:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800054a:	400a      	ands	r2, r1
 800054c:	431a      	orrs	r2, r3
 800054e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000550:	6861      	ldr	r1, [r4, #4]
 8000552:	6a2a      	ldr	r2, [r5, #32]
 8000554:	0209      	lsls	r1, r1, #8
 8000556:	0a09      	lsrs	r1, r1, #8
 8000558:	0612      	lsls	r2, r2, #24
 800055a:	430a      	orrs	r2, r1
 800055c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0b5b      	lsrs	r3, r3, #13
 8000562:	3301      	adds	r3, #1
 8000564:	0212      	lsls	r2, r2, #8
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800056a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800056c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800056e:	060a      	lsls	r2, r1, #24
 8000570:	49ab      	ldr	r1, [pc, #684]	; (8000820 <HAL_RCC_OscConfig+0x324>)
 8000572:	0f12      	lsrs	r2, r2, #28
 8000574:	5c8a      	ldrb	r2, [r1, r2]
 8000576:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000578:	4aaa      	ldr	r2, [pc, #680]	; (8000824 <HAL_RCC_OscConfig+0x328>)
 800057a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800057c:	f000 fe1a 	bl	80011b4 <HAL_InitTick>
        if(status != HAL_OK)
 8000580:	2800      	cmp	r0, #0
 8000582:	d1c1      	bne.n	8000508 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	071b      	lsls	r3, r3, #28
 8000588:	d500      	bpl.n	800058c <HAL_RCC_OscConfig+0x90>
 800058a:	e0ee      	b.n	800076a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800058c:	682b      	ldr	r3, [r5, #0]
 800058e:	075b      	lsls	r3, r3, #29
 8000590:	d500      	bpl.n	8000594 <HAL_RCC_OscConfig+0x98>
 8000592:	e110      	b.n	80007b6 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000594:	682b      	ldr	r3, [r5, #0]
 8000596:	069b      	lsls	r3, r3, #26
 8000598:	d500      	bpl.n	800059c <HAL_RCC_OscConfig+0xa0>
 800059a:	e195      	b.n	80008c8 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800059c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <HAL_RCC_OscConfig+0xa8>
 80005a2:	e1c4      	b.n	800092e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80005a4:	2000      	movs	r0, #0
 80005a6:	e7af      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005a8:	2e08      	cmp	r6, #8
 80005aa:	d004      	beq.n	80005b6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005ac:	2e0c      	cmp	r6, #12
 80005ae:	d109      	bne.n	80005c4 <HAL_RCC_OscConfig+0xc8>
 80005b0:	9a01      	ldr	r2, [sp, #4]
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d006      	beq.n	80005c4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	039b      	lsls	r3, r3, #14
 80005ba:	d5b3      	bpl.n	8000524 <HAL_RCC_OscConfig+0x28>
 80005bc:	686b      	ldr	r3, [r5, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1b0      	bne.n	8000524 <HAL_RCC_OscConfig+0x28>
 80005c2:	e7a0      	b.n	8000506 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c4:	686a      	ldr	r2, [r5, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d111      	bne.n	80005ee <HAL_RCC_OscConfig+0xf2>
 80005ca:	6822      	ldr	r2, [r4, #0]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005d0:	f7ff fe4c 	bl	800026c <HAL_GetTick>
 80005d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	0292      	lsls	r2, r2, #10
 80005dc:	4213      	tst	r3, r2
 80005de:	d1a1      	bne.n	8000524 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e0:	f7ff fe44 	bl	800026c <HAL_GetTick>
 80005e4:	1bc0      	subs	r0, r0, r7
 80005e6:	2864      	cmp	r0, #100	; 0x64
 80005e8:	d9f5      	bls.n	80005d6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80005ea:	2003      	movs	r0, #3
 80005ec:	e78c      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ee:	21a0      	movs	r1, #160	; 0xa0
 80005f0:	02c9      	lsls	r1, r1, #11
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d105      	bne.n	8000602 <HAL_RCC_OscConfig+0x106>
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	6821      	ldr	r1, [r4, #0]
 80005fa:	02d2      	lsls	r2, r2, #11
 80005fc:	430a      	orrs	r2, r1
 80005fe:	6022      	str	r2, [r4, #0]
 8000600:	e7e3      	b.n	80005ca <HAL_RCC_OscConfig+0xce>
 8000602:	6821      	ldr	r1, [r4, #0]
 8000604:	4888      	ldr	r0, [pc, #544]	; (8000828 <HAL_RCC_OscConfig+0x32c>)
 8000606:	4001      	ands	r1, r0
 8000608:	6021      	str	r1, [r4, #0]
 800060a:	6821      	ldr	r1, [r4, #0]
 800060c:	400b      	ands	r3, r1
 800060e:	9305      	str	r3, [sp, #20]
 8000610:	9b05      	ldr	r3, [sp, #20]
 8000612:	4986      	ldr	r1, [pc, #536]	; (800082c <HAL_RCC_OscConfig+0x330>)
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	400b      	ands	r3, r1
 8000618:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800061a:	2a00      	cmp	r2, #0
 800061c:	d1d8      	bne.n	80005d0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800061e:	f7ff fe25 	bl	800026c <HAL_GetTick>
 8000622:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	0292      	lsls	r2, r2, #10
 800062a:	4213      	tst	r3, r2
 800062c:	d100      	bne.n	8000630 <HAL_RCC_OscConfig+0x134>
 800062e:	e779      	b.n	8000524 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000630:	f7ff fe1c 	bl	800026c <HAL_GetTick>
 8000634:	1bc0      	subs	r0, r0, r7
 8000636:	2864      	cmp	r0, #100	; 0x64
 8000638:	d9f4      	bls.n	8000624 <HAL_RCC_OscConfig+0x128>
 800063a:	e7d6      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800063c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800063e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000640:	4213      	tst	r3, r2
 8000642:	d003      	beq.n	800064c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000644:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000646:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000648:	4311      	orrs	r1, r2
 800064a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800064c:	2e04      	cmp	r6, #4
 800064e:	d004      	beq.n	800065a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000650:	2e0c      	cmp	r6, #12
 8000652:	d125      	bne.n	80006a0 <HAL_RCC_OscConfig+0x1a4>
 8000654:	9a01      	ldr	r2, [sp, #4]
 8000656:	2a00      	cmp	r2, #0
 8000658:	d122      	bne.n	80006a0 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	0752      	lsls	r2, r2, #29
 800065e:	d502      	bpl.n	8000666 <HAL_RCC_OscConfig+0x16a>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d100      	bne.n	8000666 <HAL_RCC_OscConfig+0x16a>
 8000664:	e74f      	b.n	8000506 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000666:	6861      	ldr	r1, [r4, #4]
 8000668:	692a      	ldr	r2, [r5, #16]
 800066a:	4871      	ldr	r0, [pc, #452]	; (8000830 <HAL_RCC_OscConfig+0x334>)
 800066c:	0212      	lsls	r2, r2, #8
 800066e:	4001      	ands	r1, r0
 8000670:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000672:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000674:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000676:	6822      	ldr	r2, [r4, #0]
 8000678:	438a      	bics	r2, r1
 800067a:	4313      	orrs	r3, r2
 800067c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800067e:	f7ff ff01 	bl	8000484 <HAL_RCC_GetSysClockFreq>
 8000682:	68e3      	ldr	r3, [r4, #12]
 8000684:	4a66      	ldr	r2, [pc, #408]	; (8000820 <HAL_RCC_OscConfig+0x324>)
 8000686:	061b      	lsls	r3, r3, #24
 8000688:	0f1b      	lsrs	r3, r3, #28
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	40d8      	lsrs	r0, r3
 800068e:	4b65      	ldr	r3, [pc, #404]	; (8000824 <HAL_RCC_OscConfig+0x328>)
 8000690:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fd8e 	bl	80011b4 <HAL_InitTick>
      if(status != HAL_OK)
 8000698:	2800      	cmp	r0, #0
 800069a:	d100      	bne.n	800069e <HAL_RCC_OscConfig+0x1a2>
 800069c:	e746      	b.n	800052c <HAL_RCC_OscConfig+0x30>
 800069e:	e733      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d019      	beq.n	80006d8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006a4:	2109      	movs	r1, #9
 80006a6:	6822      	ldr	r2, [r4, #0]
 80006a8:	438a      	bics	r2, r1
 80006aa:	4313      	orrs	r3, r2
 80006ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006ae:	f7ff fddd 	bl	800026c <HAL_GetTick>
 80006b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80006b4:	2204      	movs	r2, #4
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	4213      	tst	r3, r2
 80006ba:	d007      	beq.n	80006cc <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006bc:	6862      	ldr	r2, [r4, #4]
 80006be:	692b      	ldr	r3, [r5, #16]
 80006c0:	495b      	ldr	r1, [pc, #364]	; (8000830 <HAL_RCC_OscConfig+0x334>)
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	400a      	ands	r2, r1
 80006c6:	4313      	orrs	r3, r2
 80006c8:	6063      	str	r3, [r4, #4]
 80006ca:	e72f      	b.n	800052c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006cc:	f7ff fdce 	bl	800026c <HAL_GetTick>
 80006d0:	1bc0      	subs	r0, r0, r7
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9ee      	bls.n	80006b4 <HAL_RCC_OscConfig+0x1b8>
 80006d6:	e788      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80006d8:	2201      	movs	r2, #1
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	4393      	bics	r3, r2
 80006de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006e0:	f7ff fdc4 	bl	800026c <HAL_GetTick>
 80006e4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80006e6:	2204      	movs	r2, #4
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	4213      	tst	r3, r2
 80006ec:	d100      	bne.n	80006f0 <HAL_RCC_OscConfig+0x1f4>
 80006ee:	e71d      	b.n	800052c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f0:	f7ff fdbc 	bl	800026c <HAL_GetTick>
 80006f4:	1bc0      	subs	r0, r0, r7
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9f5      	bls.n	80006e6 <HAL_RCC_OscConfig+0x1ea>
 80006fa:	e776      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80006fc:	69eb      	ldr	r3, [r5, #28]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d020      	beq.n	8000744 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	6822      	ldr	r2, [r4, #0]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4313      	orrs	r3, r2
 800070a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800070c:	f7ff fdae 	bl	800026c <HAL_GetTick>
 8000710:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	4213      	tst	r3, r2
 800071a:	d00d      	beq.n	8000738 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800071c:	6863      	ldr	r3, [r4, #4]
 800071e:	4a3f      	ldr	r2, [pc, #252]	; (800081c <HAL_RCC_OscConfig+0x320>)
 8000720:	4013      	ands	r3, r2
 8000722:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000724:	4313      	orrs	r3, r2
 8000726:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000728:	6862      	ldr	r2, [r4, #4]
 800072a:	6a2b      	ldr	r3, [r5, #32]
 800072c:	0212      	lsls	r2, r2, #8
 800072e:	061b      	lsls	r3, r3, #24
 8000730:	0a12      	lsrs	r2, r2, #8
 8000732:	4313      	orrs	r3, r2
 8000734:	6063      	str	r3, [r4, #4]
 8000736:	e725      	b.n	8000584 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000738:	f7ff fd98 	bl	800026c <HAL_GetTick>
 800073c:	1bc0      	subs	r0, r0, r7
 800073e:	2802      	cmp	r0, #2
 8000740:	d9e7      	bls.n	8000712 <HAL_RCC_OscConfig+0x216>
 8000742:	e752      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	4a3b      	ldr	r2, [pc, #236]	; (8000834 <HAL_RCC_OscConfig+0x338>)
 8000748:	4013      	ands	r3, r2
 800074a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800074c:	f7ff fd8e 	bl	800026c <HAL_GetTick>
 8000750:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	4213      	tst	r3, r2
 800075a:	d100      	bne.n	800075e <HAL_RCC_OscConfig+0x262>
 800075c:	e712      	b.n	8000584 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800075e:	f7ff fd85 	bl	800026c <HAL_GetTick>
 8000762:	1bc0      	subs	r0, r0, r7
 8000764:	2802      	cmp	r0, #2
 8000766:	d9f4      	bls.n	8000752 <HAL_RCC_OscConfig+0x256>
 8000768:	e73f      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800076a:	696a      	ldr	r2, [r5, #20]
 800076c:	2301      	movs	r3, #1
 800076e:	2a00      	cmp	r2, #0
 8000770:	d010      	beq.n	8000794 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000772:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000774:	4313      	orrs	r3, r2
 8000776:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000778:	f7ff fd78 	bl	800026c <HAL_GetTick>
 800077c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800077e:	2202      	movs	r2, #2
 8000780:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000782:	4213      	tst	r3, r2
 8000784:	d000      	beq.n	8000788 <HAL_RCC_OscConfig+0x28c>
 8000786:	e701      	b.n	800058c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000788:	f7ff fd70 	bl	800026c <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9f5      	bls.n	800077e <HAL_RCC_OscConfig+0x282>
 8000792:	e72a      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000794:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000796:	439a      	bics	r2, r3
 8000798:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800079a:	f7ff fd67 	bl	800026c <HAL_GetTick>
 800079e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80007a0:	2202      	movs	r2, #2
 80007a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007a4:	4213      	tst	r3, r2
 80007a6:	d100      	bne.n	80007aa <HAL_RCC_OscConfig+0x2ae>
 80007a8:	e6f0      	b.n	800058c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007aa:	f7ff fd5f 	bl	800026c <HAL_GetTick>
 80007ae:	1bc0      	subs	r0, r0, r7
 80007b0:	2802      	cmp	r0, #2
 80007b2:	d9f5      	bls.n	80007a0 <HAL_RCC_OscConfig+0x2a4>
 80007b4:	e719      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007b6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007b8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007bc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80007be:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007c0:	421a      	tst	r2, r3
 80007c2:	d104      	bne.n	80007ce <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007c6:	4313      	orrs	r3, r2
 80007c8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80007ca:	2301      	movs	r3, #1
 80007cc:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	4f19      	ldr	r7, [pc, #100]	; (8000838 <HAL_RCC_OscConfig+0x33c>)
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4213      	tst	r3, r2
 80007d8:	d008      	beq.n	80007ec <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	68ab      	ldr	r3, [r5, #8]
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d12b      	bne.n	800083c <HAL_RCC_OscConfig+0x340>
 80007e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007e6:	4313      	orrs	r3, r2
 80007e8:	6523      	str	r3, [r4, #80]	; 0x50
 80007ea:	e04c      	b.n	8000886 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	4313      	orrs	r3, r2
 80007f4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007f6:	f7ff fd39 	bl	800026c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80007fe:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000800:	9303      	str	r3, [sp, #12]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	9a03      	ldr	r2, [sp, #12]
 8000806:	4213      	tst	r3, r2
 8000808:	d1e7      	bne.n	80007da <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800080a:	f7ff fd2f 	bl	800026c <HAL_GetTick>
 800080e:	9b02      	ldr	r3, [sp, #8]
 8000810:	1ac0      	subs	r0, r0, r3
 8000812:	2864      	cmp	r0, #100	; 0x64
 8000814:	d9f5      	bls.n	8000802 <HAL_RCC_OscConfig+0x306>
 8000816:	e6e8      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
 8000818:	40021000 	.word	0x40021000
 800081c:	ffff1fff 	.word	0xffff1fff
 8000820:	08001360 	.word	0x08001360
 8000824:	20000000 	.word	0x20000000
 8000828:	fffeffff 	.word	0xfffeffff
 800082c:	fffbffff 	.word	0xfffbffff
 8000830:	ffffe0ff 	.word	0xffffe0ff
 8000834:	fffffeff 	.word	0xfffffeff
 8000838:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083c:	2b00      	cmp	r3, #0
 800083e:	d116      	bne.n	800086e <HAL_RCC_OscConfig+0x372>
 8000840:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000842:	4a6a      	ldr	r2, [pc, #424]	; (80009ec <HAL_RCC_OscConfig+0x4f0>)
 8000844:	4013      	ands	r3, r2
 8000846:	6523      	str	r3, [r4, #80]	; 0x50
 8000848:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800084a:	4a69      	ldr	r2, [pc, #420]	; (80009f0 <HAL_RCC_OscConfig+0x4f4>)
 800084c:	4013      	ands	r3, r2
 800084e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000850:	f7ff fd0c 	bl	800026c <HAL_GetTick>
 8000854:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	4213      	tst	r3, r2
 800085e:	d02a      	beq.n	80008b6 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000860:	f7ff fd04 	bl	800026c <HAL_GetTick>
 8000864:	4b63      	ldr	r3, [pc, #396]	; (80009f4 <HAL_RCC_OscConfig+0x4f8>)
 8000866:	1bc0      	subs	r0, r0, r7
 8000868:	4298      	cmp	r0, r3
 800086a:	d9f4      	bls.n	8000856 <HAL_RCC_OscConfig+0x35a>
 800086c:	e6bd      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800086e:	21a0      	movs	r1, #160	; 0xa0
 8000870:	00c9      	lsls	r1, r1, #3
 8000872:	428b      	cmp	r3, r1
 8000874:	d10b      	bne.n	800088e <HAL_RCC_OscConfig+0x392>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	430b      	orrs	r3, r1
 800087e:	6523      	str	r3, [r4, #80]	; 0x50
 8000880:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000882:	431a      	orrs	r2, r3
 8000884:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000886:	f7ff fcf1 	bl	800026c <HAL_GetTick>
 800088a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800088c:	e00e      	b.n	80008ac <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000890:	4a56      	ldr	r2, [pc, #344]	; (80009ec <HAL_RCC_OscConfig+0x4f0>)
 8000892:	4013      	ands	r3, r2
 8000894:	6523      	str	r3, [r4, #80]	; 0x50
 8000896:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000898:	4a55      	ldr	r2, [pc, #340]	; (80009f0 <HAL_RCC_OscConfig+0x4f4>)
 800089a:	4013      	ands	r3, r2
 800089c:	e7a4      	b.n	80007e8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089e:	f7ff fce5 	bl	800026c <HAL_GetTick>
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <HAL_RCC_OscConfig+0x4f8>)
 80008a4:	1bc0      	subs	r0, r0, r7
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d900      	bls.n	80008ac <HAL_RCC_OscConfig+0x3b0>
 80008aa:	e69e      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	4213      	tst	r3, r2
 80008b4:	d0f3      	beq.n	800089e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80008b6:	9b01      	ldr	r3, [sp, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d000      	beq.n	80008be <HAL_RCC_OscConfig+0x3c2>
 80008bc:	e66a      	b.n	8000594 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008c0:	4a4d      	ldr	r2, [pc, #308]	; (80009f8 <HAL_RCC_OscConfig+0x4fc>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80008c6:	e665      	b.n	8000594 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80008c8:	69a9      	ldr	r1, [r5, #24]
 80008ca:	2301      	movs	r3, #1
 80008cc:	4a4b      	ldr	r2, [pc, #300]	; (80009fc <HAL_RCC_OscConfig+0x500>)
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d018      	beq.n	8000904 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 80008d2:	68a1      	ldr	r1, [r4, #8]
 80008d4:	4319      	orrs	r1, r3
 80008d6:	60a1      	str	r1, [r4, #8]
 80008d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008da:	430b      	orrs	r3, r1
 80008dc:	6363      	str	r3, [r4, #52]	; 0x34
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	6a11      	ldr	r1, [r2, #32]
 80008e2:	019b      	lsls	r3, r3, #6
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80008e8:	f7ff fcc0 	bl	800026c <HAL_GetTick>
 80008ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80008ee:	2202      	movs	r2, #2
 80008f0:	68a3      	ldr	r3, [r4, #8]
 80008f2:	4213      	tst	r3, r2
 80008f4:	d000      	beq.n	80008f8 <HAL_RCC_OscConfig+0x3fc>
 80008f6:	e651      	b.n	800059c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80008f8:	f7ff fcb8 	bl	800026c <HAL_GetTick>
 80008fc:	1bc0      	subs	r0, r0, r7
 80008fe:	2802      	cmp	r0, #2
 8000900:	d9f5      	bls.n	80008ee <HAL_RCC_OscConfig+0x3f2>
 8000902:	e672      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000904:	68a1      	ldr	r1, [r4, #8]
 8000906:	4399      	bics	r1, r3
 8000908:	60a1      	str	r1, [r4, #8]
 800090a:	6a13      	ldr	r3, [r2, #32]
 800090c:	493c      	ldr	r1, [pc, #240]	; (8000a00 <HAL_RCC_OscConfig+0x504>)
 800090e:	400b      	ands	r3, r1
 8000910:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000912:	f7ff fcab 	bl	800026c <HAL_GetTick>
 8000916:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000918:	2202      	movs	r2, #2
 800091a:	68a3      	ldr	r3, [r4, #8]
 800091c:	4213      	tst	r3, r2
 800091e:	d100      	bne.n	8000922 <HAL_RCC_OscConfig+0x426>
 8000920:	e63c      	b.n	800059c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000922:	f7ff fca3 	bl	800026c <HAL_GetTick>
 8000926:	1bc0      	subs	r0, r0, r7
 8000928:	2802      	cmp	r0, #2
 800092a:	d9f5      	bls.n	8000918 <HAL_RCC_OscConfig+0x41c>
 800092c:	e65d      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800092e:	2e0c      	cmp	r6, #12
 8000930:	d043      	beq.n	80009ba <HAL_RCC_OscConfig+0x4be>
 8000932:	4a34      	ldr	r2, [pc, #208]	; (8000a04 <HAL_RCC_OscConfig+0x508>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000934:	2b02      	cmp	r3, #2
 8000936:	d12e      	bne.n	8000996 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000938:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800093a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800093c:	4013      	ands	r3, r2
 800093e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000940:	f7ff fc94 	bl	800026c <HAL_GetTick>
 8000944:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000946:	04b6      	lsls	r6, r6, #18
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	4233      	tst	r3, r6
 800094c:	d11d      	bne.n	800098a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800094e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000950:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000952:	68e2      	ldr	r2, [r4, #12]
 8000954:	430b      	orrs	r3, r1
 8000956:	492c      	ldr	r1, [pc, #176]	; (8000a08 <HAL_RCC_OscConfig+0x50c>)
 8000958:	400a      	ands	r2, r1
 800095a:	4313      	orrs	r3, r2
 800095c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800095e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000960:	4313      	orrs	r3, r2
 8000962:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	045b      	lsls	r3, r3, #17
 800096a:	4313      	orrs	r3, r2
 800096c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800096e:	f7ff fc7d 	bl	800026c <HAL_GetTick>
 8000972:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000974:	04ad      	lsls	r5, r5, #18
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	422b      	tst	r3, r5
 800097a:	d000      	beq.n	800097e <HAL_RCC_OscConfig+0x482>
 800097c:	e612      	b.n	80005a4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097e:	f7ff fc75 	bl	800026c <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x47a>
 8000988:	e62f      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098a:	f7ff fc6f 	bl	800026c <HAL_GetTick>
 800098e:	1bc0      	subs	r0, r0, r7
 8000990:	2802      	cmp	r0, #2
 8000992:	d9d9      	bls.n	8000948 <HAL_RCC_OscConfig+0x44c>
 8000994:	e629      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000996:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000998:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800099a:	4013      	ands	r3, r2
 800099c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800099e:	f7ff fc65 	bl	800026c <HAL_GetTick>
 80009a2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009a4:	04ad      	lsls	r5, r5, #18
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	422b      	tst	r3, r5
 80009aa:	d100      	bne.n	80009ae <HAL_RCC_OscConfig+0x4b2>
 80009ac:	e5fa      	b.n	80005a4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ae:	f7ff fc5d 	bl	800026c <HAL_GetTick>
 80009b2:	1b80      	subs	r0, r0, r6
 80009b4:	2802      	cmp	r0, #2
 80009b6:	d9f6      	bls.n	80009a6 <HAL_RCC_OscConfig+0x4aa>
 80009b8:	e617      	b.n	80005ea <HAL_RCC_OscConfig+0xee>
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009ba:	2280      	movs	r2, #128	; 0x80
      pll_config = RCC->CFGR;
 80009bc:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80009c0:	0252      	lsls	r2, r2, #9
 80009c2:	401a      	ands	r2, r3
        return HAL_ERROR;
 80009c4:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009c6:	428a      	cmp	r2, r1
 80009c8:	d000      	beq.n	80009cc <HAL_RCC_OscConfig+0x4d0>
 80009ca:	e59d      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009cc:	22f0      	movs	r2, #240	; 0xf0
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009d0:	0392      	lsls	r2, r2, #14
 80009d2:	401a      	ands	r2, r3
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009d4:	428a      	cmp	r2, r1
 80009d6:	d000      	beq.n	80009da <HAL_RCC_OscConfig+0x4de>
 80009d8:	e596      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80009da:	20c0      	movs	r0, #192	; 0xc0
 80009dc:	0400      	lsls	r0, r0, #16
 80009de:	4003      	ands	r3, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009e0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80009e2:	1a18      	subs	r0, r3, r0
 80009e4:	1e43      	subs	r3, r0, #1
 80009e6:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80009e8:	b2c0      	uxtb	r0, r0
 80009ea:	e58d      	b.n	8000508 <HAL_RCC_OscConfig+0xc>
 80009ec:	fffffeff 	.word	0xfffffeff
 80009f0:	fffffbff 	.word	0xfffffbff
 80009f4:	00001388 	.word	0x00001388
 80009f8:	efffffff 	.word	0xefffffff
 80009fc:	40010000 	.word	0x40010000
 8000a00:	ffffdfff 	.word	0xffffdfff
 8000a04:	feffffff 	.word	0xfeffffff
 8000a08:	ff02ffff 	.word	0xff02ffff

08000a0c <HAL_RCC_ClockConfig>:
{
 8000a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a0e:	1e06      	subs	r6, r0, #0
 8000a10:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000a12:	d101      	bne.n	8000a18 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000a14:	2001      	movs	r0, #1
}
 8000a16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4c51      	ldr	r4, [pc, #324]	; (8000b60 <HAL_RCC_ClockConfig+0x154>)
 8000a1c:	9901      	ldr	r1, [sp, #4]
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	4013      	ands	r3, r2
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d327      	bcc.n	8000a76 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a26:	6832      	ldr	r2, [r6, #0]
 8000a28:	0793      	lsls	r3, r2, #30
 8000a2a:	d42f      	bmi.n	8000a8c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a2c:	07d3      	lsls	r3, r2, #31
 8000a2e:	d435      	bmi.n	8000a9c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a30:	2301      	movs	r3, #1
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	9901      	ldr	r1, [sp, #4]
 8000a36:	401a      	ands	r2, r3
 8000a38:	4291      	cmp	r1, r2
 8000a3a:	d200      	bcs.n	8000a3e <HAL_RCC_ClockConfig+0x32>
 8000a3c:	e081      	b.n	8000b42 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a3e:	6832      	ldr	r2, [r6, #0]
 8000a40:	4c48      	ldr	r4, [pc, #288]	; (8000b64 <HAL_RCC_ClockConfig+0x158>)
 8000a42:	0753      	lsls	r3, r2, #29
 8000a44:	d500      	bpl.n	8000a48 <HAL_RCC_ClockConfig+0x3c>
 8000a46:	e084      	b.n	8000b52 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a48:	0713      	lsls	r3, r2, #28
 8000a4a:	d506      	bpl.n	8000a5a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a4c:	68e2      	ldr	r2, [r4, #12]
 8000a4e:	6933      	ldr	r3, [r6, #16]
 8000a50:	4945      	ldr	r1, [pc, #276]	; (8000b68 <HAL_RCC_ClockConfig+0x15c>)
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	400a      	ands	r2, r1
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a5a:	f7ff fd13 	bl	8000484 <HAL_RCC_GetSysClockFreq>
 8000a5e:	68e3      	ldr	r3, [r4, #12]
 8000a60:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <HAL_RCC_ClockConfig+0x160>)
 8000a62:	061b      	lsls	r3, r3, #24
 8000a64:	0f1b      	lsrs	r3, r3, #28
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	40d8      	lsrs	r0, r3
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_RCC_ClockConfig+0x164>)
 8000a6c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 fba0 	bl	80011b4 <HAL_InitTick>
 8000a74:	e7cf      	b.n	8000a16 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	9901      	ldr	r1, [sp, #4]
 8000a7a:	4393      	bics	r3, r2
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	4013      	ands	r3, r2
 8000a84:	9a01      	ldr	r2, [sp, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d1c4      	bne.n	8000a14 <HAL_RCC_ClockConfig+0x8>
 8000a8a:	e7cc      	b.n	8000a26 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a8c:	20f0      	movs	r0, #240	; 0xf0
 8000a8e:	4935      	ldr	r1, [pc, #212]	; (8000b64 <HAL_RCC_ClockConfig+0x158>)
 8000a90:	68cb      	ldr	r3, [r1, #12]
 8000a92:	4383      	bics	r3, r0
 8000a94:	68b0      	ldr	r0, [r6, #8]
 8000a96:	4303      	orrs	r3, r0
 8000a98:	60cb      	str	r3, [r1, #12]
 8000a9a:	e7c7      	b.n	8000a2c <HAL_RCC_ClockConfig+0x20>
 8000a9c:	4d31      	ldr	r5, [pc, #196]	; (8000b64 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a9e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000aa0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aa2:	2a02      	cmp	r2, #2
 8000aa4:	d119      	bne.n	8000ada <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000aa6:	039b      	lsls	r3, r3, #14
 8000aa8:	d5b4      	bpl.n	8000a14 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aaa:	2103      	movs	r1, #3
 8000aac:	68eb      	ldr	r3, [r5, #12]
 8000aae:	438b      	bics	r3, r1
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000ab4:	f7ff fbda 	bl	800026c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000aba:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d119      	bne.n	8000af4 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	68eb      	ldr	r3, [r5, #12]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d0b2      	beq.n	8000a30 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aca:	f7ff fbcf 	bl	800026c <HAL_GetTick>
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <HAL_RCC_ClockConfig+0x168>)
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d9f4      	bls.n	8000ac0 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	e79d      	b.n	8000a16 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ada:	2a03      	cmp	r2, #3
 8000adc:	d102      	bne.n	8000ae4 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ade:	019b      	lsls	r3, r3, #6
 8000ae0:	d4e3      	bmi.n	8000aaa <HAL_RCC_ClockConfig+0x9e>
 8000ae2:	e797      	b.n	8000a14 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d102      	bne.n	8000aee <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ae8:	075b      	lsls	r3, r3, #29
 8000aea:	d4de      	bmi.n	8000aaa <HAL_RCC_ClockConfig+0x9e>
 8000aec:	e792      	b.n	8000a14 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000aee:	059b      	lsls	r3, r3, #22
 8000af0:	d4db      	bmi.n	8000aaa <HAL_RCC_ClockConfig+0x9e>
 8000af2:	e78f      	b.n	8000a14 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d10b      	bne.n	8000b10 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	220c      	movs	r2, #12
 8000afa:	68eb      	ldr	r3, [r5, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d096      	beq.n	8000a30 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b02:	f7ff fbb3 	bl	800026c <HAL_GetTick>
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_RCC_ClockConfig+0x168>)
 8000b08:	1bc0      	subs	r0, r0, r7
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d9f4      	bls.n	8000af8 <HAL_RCC_ClockConfig+0xec>
 8000b0e:	e7e2      	b.n	8000ad6 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d010      	beq.n	8000b36 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b14:	220c      	movs	r2, #12
 8000b16:	68eb      	ldr	r3, [r5, #12]
 8000b18:	4213      	tst	r3, r2
 8000b1a:	d089      	beq.n	8000a30 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1c:	f7ff fba6 	bl	800026c <HAL_GetTick>
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_RCC_ClockConfig+0x168>)
 8000b22:	1bc0      	subs	r0, r0, r7
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_ClockConfig+0x108>
 8000b28:	e7d5      	b.n	8000ad6 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b2a:	f7ff fb9f 	bl	800026c <HAL_GetTick>
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_RCC_ClockConfig+0x168>)
 8000b30:	1bc0      	subs	r0, r0, r7
 8000b32:	4298      	cmp	r0, r3
 8000b34:	d8cf      	bhi.n	8000ad6 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b36:	220c      	movs	r2, #12
 8000b38:	68eb      	ldr	r3, [r5, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d1f4      	bne.n	8000b2a <HAL_RCC_ClockConfig+0x11e>
 8000b40:	e776      	b.n	8000a30 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b42:	6822      	ldr	r2, [r4, #0]
 8000b44:	439a      	bics	r2, r3
 8000b46:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b48:	6822      	ldr	r2, [r4, #0]
 8000b4a:	421a      	tst	r2, r3
 8000b4c:	d000      	beq.n	8000b50 <HAL_RCC_ClockConfig+0x144>
 8000b4e:	e761      	b.n	8000a14 <HAL_RCC_ClockConfig+0x8>
 8000b50:	e775      	b.n	8000a3e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b52:	68e3      	ldr	r3, [r4, #12]
 8000b54:	4908      	ldr	r1, [pc, #32]	; (8000b78 <HAL_RCC_ClockConfig+0x16c>)
 8000b56:	400b      	ands	r3, r1
 8000b58:	68f1      	ldr	r1, [r6, #12]
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	60e3      	str	r3, [r4, #12]
 8000b5e:	e773      	b.n	8000a48 <HAL_RCC_ClockConfig+0x3c>
 8000b60:	40022000 	.word	0x40022000
 8000b64:	40021000 	.word	0x40021000
 8000b68:	ffffc7ff 	.word	0xffffc7ff
 8000b6c:	08001360 	.word	0x08001360
 8000b70:	20000000 	.word	0x20000000
 8000b74:	00001388 	.word	0x00001388
 8000b78:	fffff8ff 	.word	0xfffff8ff

08000b7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	055b      	lsls	r3, r3, #21
 8000b84:	0f5b      	lsrs	r3, r3, #29
 8000b86:	5cd3      	ldrb	r3, [r2, r3]
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b8a:	6810      	ldr	r0, [r2, #0]
 8000b8c:	40d8      	lsrs	r0, r3
}
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	08001370 	.word	0x08001370
 8000b98:	20000000 	.word	0x20000000

08000b9c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b9c:	230f      	movs	r3, #15
{
 8000b9e:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ba0:	2403      	movs	r4, #3

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000ba2:	25e0      	movs	r5, #224	; 0xe0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ba6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ba8:	68d3      	ldr	r3, [r2, #12]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000baa:	00ed      	lsls	r5, r5, #3
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000bac:	4023      	ands	r3, r4
 8000bae:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000bb0:	68d3      	ldr	r3, [r2, #12]
 8000bb2:	34ed      	adds	r4, #237	; 0xed
 8000bb4:	4023      	ands	r3, r4
 8000bb6:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000bb8:	68d4      	ldr	r4, [r2, #12]
 8000bba:	402c      	ands	r4, r5
 8000bbc:	60c4      	str	r4, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000bbe:	68d3      	ldr	r3, [r2, #12]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000bc0:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	402b      	ands	r3, r5
 8000bc6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_RCC_GetClockConfig+0x3c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	600b      	str	r3, [r1, #0]
}
 8000bd0:	bd30      	pop	{r4, r5, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40022000 	.word	0x40022000

08000bdc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bdc:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8000bde:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000be0:	05d2      	lsls	r2, r2, #23
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d008      	beq.n	8000bf8 <TIM_Base_SetConfig+0x1c>
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <TIM_Base_SetConfig+0x60>)
 8000be8:	4290      	cmp	r0, r2
 8000bea:	d005      	beq.n	8000bf8 <TIM_Base_SetConfig+0x1c>
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <TIM_Base_SetConfig+0x64>)
 8000bee:	4290      	cmp	r0, r2
 8000bf0:	d002      	beq.n	8000bf8 <TIM_Base_SetConfig+0x1c>
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <TIM_Base_SetConfig+0x68>)
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d114      	bne.n	8000c22 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bf8:	2270      	movs	r2, #112	; 0x70
 8000bfa:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8000bfc:	684a      	ldr	r2, [r1, #4]
 8000bfe:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	05d2      	lsls	r2, r2, #23
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d008      	beq.n	8000c1a <TIM_Base_SetConfig+0x3e>
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <TIM_Base_SetConfig+0x60>)
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d005      	beq.n	8000c1a <TIM_Base_SetConfig+0x3e>
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <TIM_Base_SetConfig+0x64>)
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d002      	beq.n	8000c1a <TIM_Base_SetConfig+0x3e>
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <TIM_Base_SetConfig+0x68>)
 8000c16:	4290      	cmp	r0, r2
 8000c18:	d103      	bne.n	8000c22 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <TIM_Base_SetConfig+0x6c>)
 8000c1c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c1e:	68ca      	ldr	r2, [r1, #12]
 8000c20:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	4393      	bics	r3, r2
 8000c26:	690a      	ldr	r2, [r1, #16]
 8000c28:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000c2a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c2c:	688b      	ldr	r3, [r1, #8]
 8000c2e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000c30:	680b      	ldr	r3, [r1, #0]
 8000c32:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000c34:	2301      	movs	r3, #1
 8000c36:	6143      	str	r3, [r0, #20]
}
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40000400 	.word	0x40000400
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40011400 	.word	0x40011400
 8000c48:	fffffcff 	.word	0xfffffcff

08000c4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c4c:	2201      	movs	r2, #1
{
 8000c4e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000c50:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c52:	6a03      	ldr	r3, [r0, #32]
 8000c54:	4393      	bics	r3, r2
 8000c56:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000c58:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000c5a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c5c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000c5e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000c60:	680d      	ldr	r5, [r1, #0]
 8000c62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000c64:	2502      	movs	r5, #2
 8000c66:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000c68:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c6a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c6c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000c6e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8000c70:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8000c72:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c74:	6203      	str	r3, [r0, #32]
}
 8000c76:	bd30      	pop	{r4, r5, pc}

08000c78 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c78:	2210      	movs	r2, #16
 8000c7a:	6a03      	ldr	r3, [r0, #32]
{
 8000c7c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c7e:	4393      	bics	r3, r2
 8000c80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c84:	4c09      	ldr	r4, [pc, #36]	; (8000cac <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8000c86:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c88:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c8a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	0212      	lsls	r2, r2, #8
 8000c90:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8000c92:	2420      	movs	r4, #32
 8000c94:	43a3      	bics	r3, r4
 8000c96:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c98:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c9a:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c9c:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c9e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000ca0:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000ca2:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8000ca4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ca6:	6203      	str	r3, [r0, #32]
}
 8000ca8:	bd30      	pop	{r4, r5, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	ffff8cff 	.word	0xffff8cff

08000cb0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000cb0:	231f      	movs	r3, #31
{
 8000cb2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000cb4:	2401      	movs	r4, #1
 8000cb6:	4019      	ands	r1, r3
 8000cb8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000cba:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8000cbc:	6a03      	ldr	r3, [r0, #32]
 8000cbe:	43a3      	bics	r3, r4
 8000cc0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000cc2:	6a03      	ldr	r3, [r0, #32]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	6202      	str	r2, [r0, #32]
}
 8000cc8:	bd10      	pop	{r4, pc}

08000cca <HAL_TIM_Base_MspInit>:
 8000cca:	4770      	bx	lr

08000ccc <HAL_TIM_Base_Init>:
{
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
  if (htim == NULL)
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d014      	beq.n	8000d00 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000cd6:	0025      	movs	r5, r4
 8000cd8:	3539      	adds	r5, #57	; 0x39
 8000cda:	782b      	ldrb	r3, [r5, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	3238      	adds	r2, #56	; 0x38
 8000ce6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000ce8:	0020      	movs	r0, r4
 8000cea:	f7ff ffee 	bl	8000cca <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000cee:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cf0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000cf2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cf4:	1d21      	adds	r1, r4, #4
 8000cf6:	f7ff ff71 	bl	8000bdc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000cfa:	2301      	movs	r3, #1
  return HAL_OK;
 8000cfc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000cfe:	702b      	strb	r3, [r5, #0]
}
 8000d00:	bd70      	pop	{r4, r5, r6, pc}

08000d02 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d02:	2201      	movs	r2, #1
 8000d04:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d06:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d08:	68d9      	ldr	r1, [r3, #12]
 8000d0a:	4311      	orrs	r1, r2
 8000d0c:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d0e:	6899      	ldr	r1, [r3, #8]
 8000d10:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d12:	2906      	cmp	r1, #6
 8000d14:	d002      	beq.n	8000d1c <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	4770      	bx	lr

08000d20 <HAL_TIM_PWM_Init>:
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
  if (htim == NULL)
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d014      	beq.n	8000d54 <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000d2a:	0025      	movs	r5, r4
 8000d2c:	3539      	adds	r5, #57	; 0x39
 8000d2e:	782b      	ldrb	r3, [r5, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000d36:	0022      	movs	r2, r4
 8000d38:	3238      	adds	r2, #56	; 0x38
 8000d3a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8000d3c:	0020      	movs	r0, r4
 8000d3e:	f000 fa05 	bl	800114c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000d42:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d44:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000d46:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d48:	1d21      	adds	r1, r4, #4
 8000d4a:	f7ff ff47 	bl	8000bdc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
  return HAL_OK;
 8000d50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d52:	702b      	strb	r3, [r5, #0]
}
 8000d54:	bd70      	pop	{r4, r5, r6, pc}

08000d56 <HAL_TIM_IC_Start>:
{
 8000d56:	b510      	push	{r4, lr}
 8000d58:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6800      	ldr	r0, [r0, #0]
 8000d5e:	f7ff ffa7 	bl	8000cb0 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d62:	2107      	movs	r1, #7
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d6a:	2a06      	cmp	r2, #6
 8000d6c:	d003      	beq.n	8000d76 <HAL_TIM_IC_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	2000      	movs	r0, #0
 8000d78:	bd10      	pop	{r4, pc}

08000d7a <HAL_TIM_PWM_Start>:
 8000d7a:	b510      	push	{r4, lr}
 8000d7c:	f7ff ffeb 	bl	8000d56 <HAL_TIM_IC_Start>
 8000d80:	bd10      	pop	{r4, pc}
	...

08000d84 <HAL_TIM_PWM_ConfigChannel>:
{
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000d86:	0005      	movs	r5, r0
 8000d88:	2302      	movs	r3, #2
 8000d8a:	3538      	adds	r5, #56	; 0x38
{
 8000d8c:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8000d8e:	7829      	ldrb	r1, [r5, #0]
{
 8000d90:	0007      	movs	r7, r0
  __HAL_LOCK(htim);
 8000d92:	0018      	movs	r0, r3
 8000d94:	2901      	cmp	r1, #1
 8000d96:	d025      	beq.n	8000de4 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8000d98:	003e      	movs	r6, r7
  __HAL_LOCK(htim);
 8000d9a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d9c:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8000d9e:	7029      	strb	r1, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000da0:	7033      	strb	r3, [r6, #0]
  switch (Channel)
 8000da2:	2a0c      	cmp	r2, #12
 8000da4:	d81a      	bhi.n	8000ddc <HAL_TIM_PWM_ConfigChannel+0x58>
 8000da6:	0010      	movs	r0, r2
 8000da8:	f7ff f9ae 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000dac:	18181807 	.word	0x18181807
 8000db0:	1818181d 	.word	0x1818181d
 8000db4:	1818182f 	.word	0x1818182f
 8000db8:	52          	.byte	0x52
 8000db9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000dba:	0021      	movs	r1, r4
 8000dbc:	6838      	ldr	r0, [r7, #0]
 8000dbe:	f7ff ff45 	bl	8000c4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6999      	ldr	r1, [r3, #24]
 8000dc8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000dca:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000dcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000ddc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000dde:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000de0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000de2:	7028      	strb	r0, [r5, #0]
}
 8000de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000de6:	0021      	movs	r1, r4
 8000de8:	6838      	ldr	r0, [r7, #0]
 8000dea:	f7ff ff45 	bl	8000c78 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	6999      	ldr	r1, [r3, #24]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000dfa:	699a      	ldr	r2, [r3, #24]
 8000dfc:	4926      	ldr	r1, [pc, #152]	; (8000e98 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8000dfe:	400a      	ands	r2, r1
 8000e00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e02:	68e2      	ldr	r2, [r4, #12]
 8000e04:	6999      	ldr	r1, [r3, #24]
 8000e06:	0212      	lsls	r2, r2, #8
 8000e08:	e7e6      	b.n	8000dd8 <HAL_TIM_PWM_ConfigChannel+0x54>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e0a:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000e0c:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e0e:	4923      	ldr	r1, [pc, #140]	; (8000e9c <HAL_TIM_PWM_ConfigChannel+0x118>)
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	400a      	ands	r2, r1
 8000e14:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000e16:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000e18:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000e1a:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e1c:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8000e22:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 8000e24:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e26:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000e28:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e2a:	0212      	lsls	r2, r2, #8
  TIMx->CCMR2 = tmpccmrx;
 8000e2c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e2e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e30:	4302      	orrs	r2, r0
  TIMx->CCR3 = OC_Config->Pulse;
 8000e32:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8000e34:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000e36:	2208      	movs	r2, #8
 8000e38:	69d9      	ldr	r1, [r3, #28]
 8000e3a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000e3c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000e3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000e40:	69da      	ldr	r2, [r3, #28]
 8000e42:	438a      	bics	r2, r1
 8000e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000e46:	69da      	ldr	r2, [r3, #28]
 8000e48:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	61da      	str	r2, [r3, #28]
      break;
 8000e4e:	e7c5      	b.n	8000ddc <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000e50:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e52:	4914      	ldr	r1, [pc, #80]	; (8000ea4 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8000e54:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <HAL_TIM_PWM_ConfigChannel+0x124>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e58:	400a      	ands	r2, r1
 8000e5a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000e5c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000e5e:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000e60:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e62:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	0200      	lsls	r0, r0, #8
 8000e68:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8000e6a:	4810      	ldr	r0, [pc, #64]	; (8000eac <HAL_TIM_PWM_ConfigChannel+0x128>)
 8000e6c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e6e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000e70:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e72:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8000e74:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000e76:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e78:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8000e7a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8000e7c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	69d9      	ldr	r1, [r3, #28]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	430a      	orrs	r2, r1
 8000e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000e88:	69da      	ldr	r2, [r3, #28]
 8000e8a:	4903      	ldr	r1, [pc, #12]	; (8000e98 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000e90:	68e2      	ldr	r2, [r4, #12]
 8000e92:	69d9      	ldr	r1, [r3, #28]
 8000e94:	0212      	lsls	r2, r2, #8
 8000e96:	e7d8      	b.n	8000e4a <HAL_TIM_PWM_ConfigChannel+0xc6>
 8000e98:	fffffbff 	.word	0xfffffbff
 8000e9c:	fffffeff 	.word	0xfffffeff
 8000ea0:	fffffdff 	.word	0xfffffdff
 8000ea4:	ffffefff 	.word	0xffffefff
 8000ea8:	ffff8cff 	.word	0xffff8cff
 8000eac:	ffffdfff 	.word	0xffffdfff

08000eb0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_TIM_IC_CaptureCallback>:
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_TIM_TriggerCallback>:
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	6803      	ldr	r3, [r0, #0]
{
 8000ebc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ebe:	6919      	ldr	r1, [r3, #16]
{
 8000ec0:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ec2:	4211      	tst	r1, r2
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000ec6:	68d9      	ldr	r1, [r3, #12]
 8000ec8:	4211      	tst	r1, r2
 8000eca:	d00a      	beq.n	8000ee2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ecc:	3a05      	subs	r2, #5
 8000ece:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ed0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ed2:	3204      	adds	r2, #4
 8000ed4:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ed6:	079b      	lsls	r3, r3, #30
 8000ed8:	d05e      	beq.n	8000f98 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8000eda:	f7ff ffea 	bl	8000eb2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	6919      	ldr	r1, [r3, #16]
 8000ee8:	4211      	tst	r1, r2
 8000eea:	d010      	beq.n	8000f0e <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000eec:	68d9      	ldr	r1, [r3, #12]
 8000eee:	4211      	tst	r1, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ef2:	3a09      	subs	r2, #9
 8000ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ef6:	3207      	adds	r2, #7
 8000ef8:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000efa:	699a      	ldr	r2, [r3, #24]
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8000f00:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f02:	421a      	tst	r2, r3
 8000f04:	d04e      	beq.n	8000fa4 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f06:	f7ff ffd4 	bl	8000eb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	6919      	ldr	r1, [r3, #16]
 8000f14:	4211      	tst	r1, r2
 8000f16:	d00e      	beq.n	8000f36 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000f18:	68d9      	ldr	r1, [r3, #12]
 8000f1a:	4211      	tst	r1, r2
 8000f1c:	d00b      	beq.n	8000f36 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f1e:	3a11      	subs	r2, #17
 8000f20:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f22:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f24:	320d      	adds	r2, #13
 8000f26:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f28:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f2a:	079b      	lsls	r3, r3, #30
 8000f2c:	d040      	beq.n	8000fb0 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f2e:	f7ff ffc0 	bl	8000eb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f32:	2300      	movs	r3, #0
 8000f34:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f36:	2210      	movs	r2, #16
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	6919      	ldr	r1, [r3, #16]
 8000f3c:	4211      	tst	r1, r2
 8000f3e:	d010      	beq.n	8000f62 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000f40:	68d9      	ldr	r1, [r3, #12]
 8000f42:	4211      	tst	r1, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f46:	3a21      	subs	r2, #33	; 0x21
 8000f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f4a:	3219      	adds	r2, #25
 8000f4c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8000f54:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f56:	421a      	tst	r2, r3
 8000f58:	d030      	beq.n	8000fbc <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f5a:	f7ff ffaa 	bl	8000eb2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f62:	2201      	movs	r2, #1
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	6919      	ldr	r1, [r3, #16]
 8000f68:	4211      	tst	r1, r2
 8000f6a:	d007      	beq.n	8000f7c <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000f6c:	68d9      	ldr	r1, [r3, #12]
 8000f6e:	4211      	tst	r1, r2
 8000f70:	d004      	beq.n	8000f7c <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000f72:	3a03      	subs	r2, #3
 8000f74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f76:	0020      	movs	r0, r4
 8000f78:	f000 f8d0 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f7c:	2240      	movs	r2, #64	; 0x40
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	4211      	tst	r1, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f86:	68d9      	ldr	r1, [r3, #12]
 8000f88:	4211      	tst	r1, r2
 8000f8a:	d004      	beq.n	8000f96 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f8c:	3a81      	subs	r2, #129	; 0x81
 8000f8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f90:	0020      	movs	r0, r4
 8000f92:	f7ff ff90 	bl	8000eb6 <HAL_TIM_TriggerCallback>
}
 8000f96:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f98:	f7ff ff8a 	bl	8000eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f7ff ff89 	bl	8000eb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fa2:	e79c      	b.n	8000ede <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fa4:	f7ff ff84 	bl	8000eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fa8:	0020      	movs	r0, r4
 8000faa:	f7ff ff83 	bl	8000eb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fae:	e7ac      	b.n	8000f0a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fb0:	f7ff ff7e 	bl	8000eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fb4:	0020      	movs	r0, r4
 8000fb6:	f7ff ff7d 	bl	8000eb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fba:	e7ba      	b.n	8000f32 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fbc:	f7ff ff78 	bl	8000eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	f7ff ff77 	bl	8000eb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fc6:	e7ca      	b.n	8000f5e <HAL_TIM_IRQHandler+0xa6>

08000fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000fc8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000fca:	0004      	movs	r4, r0
 8000fcc:	3438      	adds	r4, #56	; 0x38
 8000fce:	7822      	ldrb	r2, [r4, #0]
{
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8000fd4:	2a01      	cmp	r2, #1
 8000fd6:	d013      	beq.n	8001000 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fd8:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fda:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8000fdc:	3539      	adds	r5, #57	; 0x39
 8000fde:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000fe4:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fe6:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fe8:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fea:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fec:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000fee:	2680      	movs	r6, #128	; 0x80
 8000ff0:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ff2:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000ff4:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000ff6:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000ff8:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8000ffa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000ffc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8000ffe:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001000:	bd70      	pop	{r4, r5, r6, pc}
	...

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b530      	push	{r4, r5, lr}
 8001006:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001008:	2238      	movs	r2, #56	; 0x38
 800100a:	2100      	movs	r1, #0
 800100c:	a806      	add	r0, sp, #24
 800100e:	f000 f993 	bl	8001338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001012:	2214      	movs	r2, #20
 8001014:	2100      	movs	r1, #0
 8001016:	a801      	add	r0, sp, #4
 8001018:	f000 f98e 	bl	8001338 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	4913      	ldr	r1, [pc, #76]	; (800106c <SystemClock_Config+0x68>)
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <SystemClock_Config+0x6c>)
 8001020:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001022:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001024:	401a      	ands	r2, r3
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	02db      	lsls	r3, r3, #11
 8001038:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800103a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103e:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001040:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001046:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f7ff fa56 	bl	80004fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001052:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001056:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	3b0c      	subs	r3, #12
 800105a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001062:	f7ff fcd3 	bl	8000a0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001066:	b015      	add	sp, #84	; 0x54
 8001068:	bd30      	pop	{r4, r5, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40007000 	.word	0x40007000
 8001070:	ffffe7ff 	.word	0xffffe7ff

08001074 <main>:
{
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	b088      	sub	sp, #32
  HAL_Init();
 8001078:	f7ff f8dc 	bl	8000234 <HAL_Init>
  SystemClock_Config();
 800107c:	f7ff ffc2 	bl	8001004 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2001      	movs	r0, #1
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001082:	2610      	movs	r6, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <main+0x98>)
  htim2.Init.Prescaler = 0;
 8001086:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800108a:	4301      	orrs	r1, r0
 800108c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800108e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4003      	ands	r3, r0
 8001094:	9301      	str	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001096:	2208      	movs	r2, #8
 8001098:	a802      	add	r0, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	9b01      	ldr	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f000 f94c 	bl	8001338 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a0:	0032      	movs	r2, r6
 80010a2:	2100      	movs	r1, #0
 80010a4:	a804      	add	r0, sp, #16
 80010a6:	f000 f947 	bl	8001338 <memset>
  htim2.Instance = TIM2;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	4c18      	ldr	r4, [pc, #96]	; (8001110 <main+0x9c>)
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = 31999;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <main+0xa0>)
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010b4:	0020      	movs	r0, r4
  htim2.Init.Period = 31999;
 80010b6:	60e3      	str	r3, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80010b8:	60a6      	str	r6, [r4, #8]
  htim2.Init.Prescaler = 0;
 80010ba:	6065      	str	r5, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c0:	f7ff fe2e 	bl	8000d20 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	a902      	add	r1, sp, #8
 80010c6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	f7ff ff7c 	bl	8000fc8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 15999;
 80010d2:	4e11      	ldr	r6, [pc, #68]	; (8001118 <main+0xa4>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d4:	a904      	add	r1, sp, #16
 80010d6:	002a      	movs	r2, r5
 80010d8:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010da:	9304      	str	r3, [sp, #16]
  sConfigOC.Pulse = 15999;
 80010dc:	9605      	str	r6, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	9506      	str	r5, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e0:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e2:	f7ff fe4f 	bl	8000d84 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80010e6:	0020      	movs	r0, r4
 80010e8:	f000 f83e 	bl	8001168 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010ec:	0029      	movs	r1, r5
 80010ee:	0020      	movs	r0, r4
 80010f0:	f7ff fe43 	bl	8000d7a <HAL_TIM_PWM_Start>
    if(pulse > 0)
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	dd06      	ble.n	8001106 <main+0x92>
      pulse -= 160;
 80010f8:	3ea0      	subs	r6, #160	; 0xa0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80010fa:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(20);
 80010fc:	2014      	movs	r0, #20
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80010fe:	635e      	str	r6, [r3, #52]	; 0x34
    HAL_Delay(20);
 8001100:	f7ff f8ba 	bl	8000278 <HAL_Delay>
    if(pulse > 0)
 8001104:	e7f6      	b.n	80010f4 <main+0x80>
      pulse = 15999;
 8001106:	4e04      	ldr	r6, [pc, #16]	; (8001118 <main+0xa4>)
 8001108:	e7f7      	b.n	80010fa <main+0x86>
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40021000 	.word	0x40021000
 8001110:	20000024 	.word	0x20000024
 8001114:	00007cff 	.word	0x00007cff
 8001118:	00003e7f 	.word	0x00003e7f

0800111c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800111e:	6802      	ldr	r2, [r0, #0]
{
 8001120:	b510      	push	{r4, lr}
  if (htim->Instance == TIM3) {
 8001122:	429a      	cmp	r2, r3
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8001126:	f7ff f899 	bl	800025c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bd10      	pop	{r4, pc}
 800112c:	40000400 	.word	0x40000400

08001130 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	2201      	movs	r2, #1
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_MspInit+0x18>)
 8001134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800113e:	0552      	lsls	r2, r2, #21
 8001140:	430a      	orrs	r2, r1
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	4770      	bx	lr
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	6802      	ldr	r2, [r0, #0]
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	429a      	cmp	r2, r3
 8001154:	d104      	bne.n	8001160 <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	2301      	movs	r3, #1
 8001158:	4a02      	ldr	r2, [pc, #8]	; (8001164 <HAL_TIM_PWM_MspInit+0x18>)
 800115a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800115c:	430b      	orrs	r3, r1
 800115e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001160:	4770      	bx	lr
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b510      	push	{r4, lr}
 800116a:	0004      	movs	r4, r0
 800116c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	2214      	movs	r2, #20
 8001170:	2100      	movs	r1, #0
 8001172:	a801      	add	r0, sp, #4
 8001174:	f000 f8e0 	bl	8001338 <memset>
  if(htim->Instance==TIM2)
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	429a      	cmp	r2, r3
 8001180:	d113      	bne.n	80011aa <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2001      	movs	r0, #1
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_TIM_MspPostInit+0x48>)
 8001186:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001188:	4301      	orrs	r1, r0
 800118a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800118c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4003      	ands	r3, r0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001196:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800119a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	3b1e      	subs	r3, #30
 800119e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80011a2:	3303      	adds	r3, #3
 80011a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f7ff f8b1 	bl	800030c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011aa:	b006      	add	sp, #24
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b510      	push	{r4, lr}
 80011b6:	0001      	movs	r1, r0
 80011b8:	b086      	sub	sp, #24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80011ba:	2200      	movs	r2, #0
 80011bc:	2010      	movs	r0, #16
 80011be:	f7ff f86b 	bl	8000298 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80011c2:	2010      	movs	r0, #16
 80011c4:	f7ff f898 	bl	80002f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80011c8:	2302      	movs	r3, #2
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_InitTick+0x5c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011cc:	a801      	add	r0, sp, #4
  __HAL_RCC_TIM3_CLK_ENABLE();
 80011ce:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d4:	4669      	mov	r1, sp
 80011d6:	f7ff fce1 	bl	8000b9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011da:	f7ff fccf 	bl	8000b7c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011de:	4c0d      	ldr	r4, [pc, #52]	; (8001214 <HAL_InitTick+0x60>)
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_InitTick+0x64>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_InitTick+0x68>)
  htim3.Instance = TIM3;
 80011e4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_InitTick+0x6c>)
 80011e8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011ea:	f7fe ff97 	bl	800011c <__udivsi3>
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 80011ee:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011f0:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
 80011f2:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80011f4:	0020      	movs	r0, r4
  htim3.Init.ClockDivision = 0;
 80011f6:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80011fa:	f7ff fd67 	bl	8000ccc <HAL_TIM_Base_Init>
 80011fe:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_InitTick+0x58>
    return HAL_TIM_Base_Start_IT(&htim3);
 8001206:	0020      	movs	r0, r4
 8001208:	f7ff fd7b 	bl	8000d02 <HAL_TIM_Base_Start_IT>
}
 800120c:	b006      	add	sp, #24
 800120e:	bd10      	pop	{r4, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	20000060 	.word	0x20000060
 8001218:	40000400 	.word	0x40000400
 800121c:	000f4240 	.word	0x000f4240
 8001220:	000003e7 	.word	0x000003e7

08001224 <NMI_Handler>:
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler>

08001228 <SVC_Handler>:
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	4770      	bx	lr
	...

08001230 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001230:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001232:	4802      	ldr	r0, [pc, #8]	; (800123c <TIM3_IRQHandler+0xc>)
 8001234:	f7ff fe40 	bl	8000eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001238:	bd10      	pop	{r4, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000060 	.word	0x20000060

08001240 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <SystemInit+0x44>)
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <SystemInit+0x48>)
 8001250:	400a      	ands	r2, r1
 8001252:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <SystemInit+0x4c>)
 8001258:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800125a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800125c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	438a      	bics	r2, r1
 8001262:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <SystemInit+0x50>)
 8001268:	400a      	ands	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	4909      	ldr	r1, [pc, #36]	; (8001294 <SystemInit+0x54>)
 8001270:	400a      	ands	r2, r1
 8001272:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <SystemInit+0x58>)
 800127c:	0512      	lsls	r2, r2, #20
 800127e:	609a      	str	r2, [r3, #8]
#endif
}
 8001280:	4770      	bx	lr
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40021000 	.word	0x40021000
 8001288:	88ff400c 	.word	0x88ff400c
 800128c:	fef6fff6 	.word	0xfef6fff6
 8001290:	fffbffff 	.word	0xfffbffff
 8001294:	ff02ffff 	.word	0xff02ffff
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800129e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80012a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a2:	e003      	b.n	80012ac <LoopCopyDataInit>

080012a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80012a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012aa:	3104      	adds	r1, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <LoopForever+0xa>)
  ldr  r3, =_edata
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <LoopForever+0xe>)
  adds  r2, r0, r1
 80012b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b4:	d3f6      	bcc.n	80012a4 <CopyDataInit>
  ldr  r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopForever+0x12>)
  b  LoopFillZerobss
 80012b8:	e002      	b.n	80012c0 <LoopFillZerobss>

080012ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80012ba:	2300      	movs	r3, #0
  str  r3, [r2]
 80012bc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012be:	3204      	adds	r2, #4

080012c0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <LoopForever+0x16>)
  cmp  r2, r3
 80012c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c4:	d3f9      	bcc.n	80012ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c6:	f7ff ffbb 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f000 f811 	bl	80012f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fed1 	bl	8001074 <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
   ldr   r0, =_estack
 80012d4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80012d8:	0800138c 	.word	0x0800138c
  ldr  r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80012e4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80012e8:	2000009c 	.word	0x2000009c

080012ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_COMP_IRQHandler>
	...

080012f0 <__libc_init_array>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	2600      	movs	r6, #0
 80012f4:	4d0c      	ldr	r5, [pc, #48]	; (8001328 <__libc_init_array+0x38>)
 80012f6:	4c0d      	ldr	r4, [pc, #52]	; (800132c <__libc_init_array+0x3c>)
 80012f8:	1b64      	subs	r4, r4, r5
 80012fa:	10a4      	asrs	r4, r4, #2
 80012fc:	42a6      	cmp	r6, r4
 80012fe:	d109      	bne.n	8001314 <__libc_init_array+0x24>
 8001300:	2600      	movs	r6, #0
 8001302:	f000 f821 	bl	8001348 <_init>
 8001306:	4d0a      	ldr	r5, [pc, #40]	; (8001330 <__libc_init_array+0x40>)
 8001308:	4c0a      	ldr	r4, [pc, #40]	; (8001334 <__libc_init_array+0x44>)
 800130a:	1b64      	subs	r4, r4, r5
 800130c:	10a4      	asrs	r4, r4, #2
 800130e:	42a6      	cmp	r6, r4
 8001310:	d105      	bne.n	800131e <__libc_init_array+0x2e>
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	00b3      	lsls	r3, r6, #2
 8001316:	58eb      	ldr	r3, [r5, r3]
 8001318:	4798      	blx	r3
 800131a:	3601      	adds	r6, #1
 800131c:	e7ee      	b.n	80012fc <__libc_init_array+0xc>
 800131e:	00b3      	lsls	r3, r6, #2
 8001320:	58eb      	ldr	r3, [r5, r3]
 8001322:	4798      	blx	r3
 8001324:	3601      	adds	r6, #1
 8001326:	e7f2      	b.n	800130e <__libc_init_array+0x1e>
 8001328:	08001384 	.word	0x08001384
 800132c:	08001384 	.word	0x08001384
 8001330:	08001384 	.word	0x08001384
 8001334:	08001388 	.word	0x08001388

08001338 <memset>:
 8001338:	0003      	movs	r3, r0
 800133a:	1882      	adds	r2, r0, r2
 800133c:	4293      	cmp	r3, r2
 800133e:	d100      	bne.n	8001342 <memset+0xa>
 8001340:	4770      	bx	lr
 8001342:	7019      	strb	r1, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	e7f9      	b.n	800133c <memset+0x4>

08001348 <_init>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr

08001354 <_fini>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135a:	bc08      	pop	{r3}
 800135c:	469e      	mov	lr, r3
 800135e:	4770      	bx	lr
