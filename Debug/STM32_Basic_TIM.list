
STM32_Basic_TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001090  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001150  08001150  00011150  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800116c  0800116c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001170  08001170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000004  08001178  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000060  08001178  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007990  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000145f  00000000  00000000  000279bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047e4  00000000  00000000  00028e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a0  00000000  00000000  0002d600  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f0  00000000  00000000  0002dba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002f71  00000000  00000000  0002e490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002329  00000000  00000000  00031401  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003372a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001088  00000000  00000000  000337a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001138 	.word	0x08001138

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001138 	.word	0x08001138

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000234:	21fa      	movs	r1, #250	; 0xfa
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <HAL_InitTick+0x2c>)
{
 8000238:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800023a:	0089      	lsls	r1, r1, #2
{
 800023c:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f870 	bl	8000328 <HAL_SYSTICK_Config>
 8000248:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800024a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800024c:	2c00      	cmp	r4, #0
 800024e:	d105      	bne.n	800025c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000250:	3802      	subs	r0, #2
 8000252:	0022      	movs	r2, r4
 8000254:	0029      	movs	r1, r5
 8000256:	f000 f837 	bl	80002c8 <HAL_NVIC_SetPriority>
 800025a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 800025c:	bd70      	pop	{r4, r5, r6, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000264:	2340      	movs	r3, #64	; 0x40
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <HAL_Init+0x24>)
{
 8000268:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800026a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800026c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800026e:	430b      	orrs	r3, r1
 8000270:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000272:	f7ff ffdf 	bl	8000234 <HAL_InitTick>
 8000276:	1e04      	subs	r4, r0, #0
 8000278:	d103      	bne.n	8000282 <HAL_Init+0x1e>
    HAL_MspInit();
 800027a:	f000 fe8f 	bl	8000f9c <HAL_MspInit>
}
 800027e:	0020      	movs	r0, r4
 8000280:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000282:	2401      	movs	r4, #1
 8000284:	e7fb      	b.n	800027e <HAL_Init+0x1a>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000020 	.word	0x20000020

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002ac:	f7ff fff6 	bl	800029c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80002b0:	1c63      	adds	r3, r4, #1
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80002b6:	0005      	movs	r5, r0
    wait++;
 80002b8:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	f7ff ffef 	bl	800029c <HAL_GetTick>
 80002be:	1b40      	subs	r0, r0, r5
 80002c0:	4284      	cmp	r4, r0
 80002c2:	d8fa      	bhi.n	80002ba <HAL_Delay+0x12>
  {
  }
}
 80002c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080002c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002cc:	2800      	cmp	r0, #0
 80002ce:	da14      	bge.n	80002fa <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	230f      	movs	r3, #15
 80002d2:	b2c0      	uxtb	r0, r0
 80002d4:	4003      	ands	r3, r0
 80002d6:	3b08      	subs	r3, #8
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <HAL_NVIC_SetPriority+0x58>)
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	189b      	adds	r3, r3, r2
 80002e0:	2203      	movs	r2, #3
 80002e2:	4010      	ands	r0, r2
 80002e4:	4090      	lsls	r0, r2
 80002e6:	32fc      	adds	r2, #252	; 0xfc
 80002e8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f0:	69dc      	ldr	r4, [r3, #28]
 80002f2:	43ac      	bics	r4, r5
 80002f4:	4321      	orrs	r1, r4
 80002f6:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fa:	2503      	movs	r5, #3
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	4028      	ands	r0, r5
 8000300:	40a8      	lsls	r0, r5
 8000302:	35fc      	adds	r5, #252	; 0xfc
 8000304:	002e      	movs	r6, r5
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_NVIC_SetPriority+0x5c>)
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	189b      	adds	r3, r3, r2
 800030c:	22c0      	movs	r2, #192	; 0xc0
 800030e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000310:	4029      	ands	r1, r5
 8000312:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	589c      	ldr	r4, [r3, r2]
 8000318:	43b4      	bics	r4, r6
 800031a:	4321      	orrs	r1, r4
 800031c:	5099      	str	r1, [r3, r2]
 800031e:	e7eb      	b.n	80002f8 <HAL_NVIC_SetPriority+0x30>
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000328:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_SYSTICK_Config+0x28>)
 800032a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800032c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80d      	bhi.n	800034e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	6a03      	ldr	r3, [r0, #32]
 800033c:	0609      	lsls	r1, r1, #24
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	430b      	orrs	r3, r1
 8000344:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000346:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000348:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800034e:	4770      	bx	lr
 8000350:	00ffffff 	.word	0x00ffffff
 8000354:	e000e010 	.word	0xe000e010
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800035e:	4a55      	ldr	r2, [pc, #340]	; (80004b4 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000360:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000362:	1882      	adds	r2, r0, r2
 8000364:	1e54      	subs	r4, r2, #1
 8000366:	41a2      	sbcs	r2, r4
{
 8000368:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800036a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800036c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800036e:	3205      	adds	r2, #5
 8000370:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000372:	9a01      	ldr	r2, [sp, #4]
 8000374:	40da      	lsrs	r2, r3
 8000376:	d101      	bne.n	800037c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000378:	b005      	add	sp, #20
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800037c:	2501      	movs	r5, #1
 800037e:	409d      	lsls	r5, r3
 8000380:	9a01      	ldr	r2, [sp, #4]
 8000382:	402a      	ands	r2, r5
 8000384:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000386:	d100      	bne.n	800038a <HAL_GPIO_Init+0x2e>
 8000388:	e091      	b.n	80004ae <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800038a:	684a      	ldr	r2, [r1, #4]
 800038c:	4694      	mov	ip, r2
 800038e:	2210      	movs	r2, #16
 8000390:	4664      	mov	r4, ip
 8000392:	4394      	bics	r4, r2
 8000394:	0022      	movs	r2, r4
 8000396:	3c01      	subs	r4, #1
 8000398:	2a02      	cmp	r2, #2
 800039a:	d11f      	bne.n	80003dc <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800039c:	2407      	movs	r4, #7
 800039e:	270f      	movs	r7, #15
 80003a0:	401c      	ands	r4, r3
 80003a2:	00a4      	lsls	r4, r4, #2
 80003a4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80003a6:	08da      	lsrs	r2, r3, #3
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	1882      	adds	r2, r0, r2
 80003ac:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003ae:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80003b0:	690f      	ldr	r7, [r1, #16]
 80003b2:	40a7      	lsls	r7, r4
 80003b4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003b6:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003b8:	2403      	movs	r4, #3
 80003ba:	005e      	lsls	r6, r3, #1
 80003bc:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80003be:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003c0:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003c2:	68cc      	ldr	r4, [r1, #12]
 80003c4:	40b4      	lsls	r4, r6
 80003c6:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80003c8:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ca:	4662      	mov	r2, ip
 80003cc:	06d2      	lsls	r2, r2, #27
 80003ce:	0fd2      	lsrs	r2, r2, #31
 80003d0:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80003d2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d4:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80003d8:	6042      	str	r2, [r0, #4]
 80003da:	e001      	b.n	80003e0 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003dc:	2c01      	cmp	r4, #1
 80003de:	d9eb      	bls.n	80003b8 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003e0:	2603      	movs	r6, #3
 80003e2:	0034      	movs	r4, r6
 80003e4:	005d      	lsls	r5, r3, #1
 80003e6:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e8:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003ea:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ec:	4032      	ands	r2, r6
 80003ee:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003f0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003f2:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003f6:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80003f8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80003fa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80003fc:	688a      	ldr	r2, [r1, #8]
 80003fe:	40aa      	lsls	r2, r5
 8000400:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000402:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000404:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000406:	00d2      	lsls	r2, r2, #3
 8000408:	d551      	bpl.n	80004ae <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	2501      	movs	r5, #1
 800040c:	4c2a      	ldr	r4, [pc, #168]	; (80004b8 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800040e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000412:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000414:	001d      	movs	r5, r3
 8000416:	4035      	ands	r5, r6
 8000418:	00ad      	lsls	r5, r5, #2
 800041a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	6362      	str	r2, [r4, #52]	; 0x34
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000420:	089c      	lsrs	r4, r3, #2
 8000422:	00a4      	lsls	r4, r4, #2
 8000424:	18a4      	adds	r4, r4, r2
 8000426:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000428:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800042a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800042c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800042e:	05ff      	lsls	r7, r7, #23
 8000430:	2200      	movs	r2, #0
 8000432:	42b8      	cmp	r0, r7
 8000434:	d010      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000436:	4f22      	ldr	r7, [pc, #136]	; (80004c0 <HAL_GPIO_Init+0x164>)
 8000438:	3201      	adds	r2, #1
 800043a:	42b8      	cmp	r0, r7
 800043c:	d00c      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 800043e:	4f21      	ldr	r7, [pc, #132]	; (80004c4 <HAL_GPIO_Init+0x168>)
 8000440:	3201      	adds	r2, #1
 8000442:	42b8      	cmp	r0, r7
 8000444:	d008      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000446:	4f20      	ldr	r7, [pc, #128]	; (80004c8 <HAL_GPIO_Init+0x16c>)
 8000448:	0032      	movs	r2, r6
 800044a:	42b8      	cmp	r0, r7
 800044c:	d004      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 800044e:	4e1f      	ldr	r6, [pc, #124]	; (80004cc <HAL_GPIO_Init+0x170>)
 8000450:	3201      	adds	r2, #1
 8000452:	42b0      	cmp	r0, r6
 8000454:	d000      	beq.n	8000458 <HAL_GPIO_Init+0xfc>
 8000456:	9a03      	ldr	r2, [sp, #12]
 8000458:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800045c:	9d02      	ldr	r5, [sp, #8]
 800045e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000460:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000462:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000464:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000466:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000468:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800046a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800046c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046e:	03ff      	lsls	r7, r7, #15
 8000470:	d401      	bmi.n	8000476 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000472:	0035      	movs	r5, r6
 8000474:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000476:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000478:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800047a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800047c:	9d00      	ldr	r5, [sp, #0]
 800047e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000480:	03bf      	lsls	r7, r7, #14
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000484:	0035      	movs	r5, r6
 8000486:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000488:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800048a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800048c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800048e:	9d00      	ldr	r5, [sp, #0]
 8000490:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000492:	02ff      	lsls	r7, r7, #11
 8000494:	d401      	bmi.n	800049a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000496:	0035      	movs	r5, r6
 8000498:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800049a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800049c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800049e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80004a0:	9e00      	ldr	r6, [sp, #0]
 80004a2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a4:	02bf      	lsls	r7, r7, #10
 80004a6:	d401      	bmi.n	80004ac <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80004a8:	4025      	ands	r5, r4
 80004aa:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ac:	60d6      	str	r6, [r2, #12]
    position++;
 80004ae:	3301      	adds	r3, #1
 80004b0:	e75f      	b.n	8000372 <HAL_GPIO_Init+0x16>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	afffe400 	.word	0xafffe400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	50000400 	.word	0x50000400
 80004c4:	50000800 	.word	0x50000800
 80004c8:	50000c00 	.word	0x50000c00
 80004cc:	50001000 	.word	0x50001000
 80004d0:	40010400 	.word	0x40010400

080004d4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80004d4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80004d8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80004da:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80004dc:	400a      	ands	r2, r1
 80004de:	2a08      	cmp	r2, #8
 80004e0:	d026      	beq.n	8000530 <HAL_RCC_GetSysClockFreq+0x5c>
 80004e2:	2a0c      	cmp	r2, #12
 80004e4:	d006      	beq.n	80004f4 <HAL_RCC_GetSysClockFreq+0x20>
 80004e6:	2a04      	cmp	r2, #4
 80004e8:	d11a      	bne.n	8000520 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	06db      	lsls	r3, r3, #27
 80004ee:	d421      	bmi.n	8000534 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80004f0:	4812      	ldr	r0, [pc, #72]	; (800053c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80004f2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80004f4:	028a      	lsls	r2, r1, #10
 80004f6:	4812      	ldr	r0, [pc, #72]	; (8000540 <HAL_RCC_GetSysClockFreq+0x6c>)
 80004f8:	0f12      	lsrs	r2, r2, #28
 80004fa:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004fc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004fe:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000500:	0f89      	lsrs	r1, r1, #30
 8000502:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000504:	03c0      	lsls	r0, r0, #15
 8000506:	d504      	bpl.n	8000512 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000508:	480e      	ldr	r0, [pc, #56]	; (8000544 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800050a:	4350      	muls	r0, r2
 800050c:	f7ff fe06 	bl	800011c <__udivsi3>
 8000510:	e7ef      	b.n	80004f2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	06db      	lsls	r3, r3, #27
 8000516:	d501      	bpl.n	800051c <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <HAL_RCC_GetSysClockFreq+0x74>)
 800051a:	e7f6      	b.n	800050a <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <HAL_RCC_GetSysClockFreq+0x68>)
 800051e:	e7f4      	b.n	800050a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000520:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000522:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000524:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000526:	041b      	lsls	r3, r3, #16
 8000528:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800052a:	3301      	adds	r3, #1
 800052c:	4098      	lsls	r0, r3
 800052e:	e7e0      	b.n	80004f2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <HAL_RCC_GetSysClockFreq+0x70>)
 8000532:	e7de      	b.n	80004f2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000536:	e7dc      	b.n	80004f2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000538:	40021000 	.word	0x40021000
 800053c:	00f42400 	.word	0x00f42400
 8000540:	08001160 	.word	0x08001160
 8000544:	007a1200 	.word	0x007a1200
 8000548:	003d0900 	.word	0x003d0900

0800054c <HAL_RCC_OscConfig>:
{
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	0005      	movs	r5, r0
 8000550:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000552:	2800      	cmp	r0, #0
 8000554:	d102      	bne.n	800055c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000556:	2001      	movs	r0, #1
}
 8000558:	b007      	add	sp, #28
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800055c:	230c      	movs	r3, #12
 800055e:	4cc2      	ldr	r4, [pc, #776]	; (8000868 <HAL_RCC_OscConfig+0x31c>)
 8000560:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000562:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000564:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	025b      	lsls	r3, r3, #9
 800056a:	401a      	ands	r2, r3
 800056c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056e:	6802      	ldr	r2, [r0, #0]
 8000570:	07d2      	lsls	r2, r2, #31
 8000572:	d441      	bmi.n	80005f8 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	079b      	lsls	r3, r3, #30
 8000578:	d500      	bpl.n	800057c <HAL_RCC_OscConfig+0x30>
 800057a:	e087      	b.n	800068c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	06db      	lsls	r3, r3, #27
 8000580:	d528      	bpl.n	80005d4 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000582:	2e00      	cmp	r6, #0
 8000584:	d000      	beq.n	8000588 <HAL_RCC_OscConfig+0x3c>
 8000586:	e0e1      	b.n	800074c <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	059b      	lsls	r3, r3, #22
 800058c:	d502      	bpl.n	8000594 <HAL_RCC_OscConfig+0x48>
 800058e:	69eb      	ldr	r3, [r5, #28]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0e0      	beq.n	8000556 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000594:	6862      	ldr	r2, [r4, #4]
 8000596:	49b5      	ldr	r1, [pc, #724]	; (800086c <HAL_RCC_OscConfig+0x320>)
 8000598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800059a:	400a      	ands	r2, r1
 800059c:	431a      	orrs	r2, r3
 800059e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80005a0:	6861      	ldr	r1, [r4, #4]
 80005a2:	6a2a      	ldr	r2, [r5, #32]
 80005a4:	0209      	lsls	r1, r1, #8
 80005a6:	0a09      	lsrs	r1, r1, #8
 80005a8:	0612      	lsls	r2, r2, #24
 80005aa:	430a      	orrs	r2, r1
 80005ac:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0b5b      	lsrs	r3, r3, #13
 80005b2:	3301      	adds	r3, #1
 80005b4:	0212      	lsls	r2, r2, #8
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005ba:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005bc:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005be:	060a      	lsls	r2, r1, #24
 80005c0:	49ab      	ldr	r1, [pc, #684]	; (8000870 <HAL_RCC_OscConfig+0x324>)
 80005c2:	0f12      	lsrs	r2, r2, #28
 80005c4:	5c8a      	ldrb	r2, [r1, r2]
 80005c6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005c8:	4aaa      	ldr	r2, [pc, #680]	; (8000874 <HAL_RCC_OscConfig+0x328>)
 80005ca:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005cc:	f7ff fe32 	bl	8000234 <HAL_InitTick>
        if(status != HAL_OK)
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d1c1      	bne.n	8000558 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	071b      	lsls	r3, r3, #28
 80005d8:	d500      	bpl.n	80005dc <HAL_RCC_OscConfig+0x90>
 80005da:	e0ee      	b.n	80007ba <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005dc:	682b      	ldr	r3, [r5, #0]
 80005de:	075b      	lsls	r3, r3, #29
 80005e0:	d500      	bpl.n	80005e4 <HAL_RCC_OscConfig+0x98>
 80005e2:	e110      	b.n	8000806 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	069b      	lsls	r3, r3, #26
 80005e8:	d500      	bpl.n	80005ec <HAL_RCC_OscConfig+0xa0>
 80005ea:	e195      	b.n	8000918 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d000      	beq.n	80005f4 <HAL_RCC_OscConfig+0xa8>
 80005f2:	e1c4      	b.n	800097e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80005f4:	2000      	movs	r0, #0
 80005f6:	e7af      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005f8:	2e08      	cmp	r6, #8
 80005fa:	d004      	beq.n	8000606 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005fc:	2e0c      	cmp	r6, #12
 80005fe:	d109      	bne.n	8000614 <HAL_RCC_OscConfig+0xc8>
 8000600:	9a01      	ldr	r2, [sp, #4]
 8000602:	2a00      	cmp	r2, #0
 8000604:	d006      	beq.n	8000614 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	039b      	lsls	r3, r3, #14
 800060a:	d5b3      	bpl.n	8000574 <HAL_RCC_OscConfig+0x28>
 800060c:	686b      	ldr	r3, [r5, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1b0      	bne.n	8000574 <HAL_RCC_OscConfig+0x28>
 8000612:	e7a0      	b.n	8000556 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000614:	686a      	ldr	r2, [r5, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d111      	bne.n	800063e <HAL_RCC_OscConfig+0xf2>
 800061a:	6822      	ldr	r2, [r4, #0]
 800061c:	4313      	orrs	r3, r2
 800061e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000620:	f7ff fe3c 	bl	800029c <HAL_GetTick>
 8000624:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	0292      	lsls	r2, r2, #10
 800062c:	4213      	tst	r3, r2
 800062e:	d1a1      	bne.n	8000574 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000630:	f7ff fe34 	bl	800029c <HAL_GetTick>
 8000634:	1bc0      	subs	r0, r0, r7
 8000636:	2864      	cmp	r0, #100	; 0x64
 8000638:	d9f5      	bls.n	8000626 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800063a:	2003      	movs	r0, #3
 800063c:	e78c      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063e:	21a0      	movs	r1, #160	; 0xa0
 8000640:	02c9      	lsls	r1, r1, #11
 8000642:	428a      	cmp	r2, r1
 8000644:	d105      	bne.n	8000652 <HAL_RCC_OscConfig+0x106>
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	6821      	ldr	r1, [r4, #0]
 800064a:	02d2      	lsls	r2, r2, #11
 800064c:	430a      	orrs	r2, r1
 800064e:	6022      	str	r2, [r4, #0]
 8000650:	e7e3      	b.n	800061a <HAL_RCC_OscConfig+0xce>
 8000652:	6821      	ldr	r1, [r4, #0]
 8000654:	4888      	ldr	r0, [pc, #544]	; (8000878 <HAL_RCC_OscConfig+0x32c>)
 8000656:	4001      	ands	r1, r0
 8000658:	6021      	str	r1, [r4, #0]
 800065a:	6821      	ldr	r1, [r4, #0]
 800065c:	400b      	ands	r3, r1
 800065e:	9305      	str	r3, [sp, #20]
 8000660:	9b05      	ldr	r3, [sp, #20]
 8000662:	4986      	ldr	r1, [pc, #536]	; (800087c <HAL_RCC_OscConfig+0x330>)
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	400b      	ands	r3, r1
 8000668:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800066a:	2a00      	cmp	r2, #0
 800066c:	d1d8      	bne.n	8000620 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800066e:	f7ff fe15 	bl	800029c <HAL_GetTick>
 8000672:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	0292      	lsls	r2, r2, #10
 800067a:	4213      	tst	r3, r2
 800067c:	d100      	bne.n	8000680 <HAL_RCC_OscConfig+0x134>
 800067e:	e779      	b.n	8000574 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000680:	f7ff fe0c 	bl	800029c <HAL_GetTick>
 8000684:	1bc0      	subs	r0, r0, r7
 8000686:	2864      	cmp	r0, #100	; 0x64
 8000688:	d9f4      	bls.n	8000674 <HAL_RCC_OscConfig+0x128>
 800068a:	e7d6      	b.n	800063a <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800068c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800068e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000690:	4213      	tst	r3, r2
 8000692:	d003      	beq.n	800069c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000694:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000696:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000698:	4311      	orrs	r1, r2
 800069a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800069c:	2e04      	cmp	r6, #4
 800069e:	d004      	beq.n	80006aa <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80006a0:	2e0c      	cmp	r6, #12
 80006a2:	d125      	bne.n	80006f0 <HAL_RCC_OscConfig+0x1a4>
 80006a4:	9a01      	ldr	r2, [sp, #4]
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d122      	bne.n	80006f0 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80006aa:	6822      	ldr	r2, [r4, #0]
 80006ac:	0752      	lsls	r2, r2, #29
 80006ae:	d502      	bpl.n	80006b6 <HAL_RCC_OscConfig+0x16a>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <HAL_RCC_OscConfig+0x16a>
 80006b4:	e74f      	b.n	8000556 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006b6:	6861      	ldr	r1, [r4, #4]
 80006b8:	692a      	ldr	r2, [r5, #16]
 80006ba:	4871      	ldr	r0, [pc, #452]	; (8000880 <HAL_RCC_OscConfig+0x334>)
 80006bc:	0212      	lsls	r2, r2, #8
 80006be:	4001      	ands	r1, r0
 80006c0:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006c2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006c6:	6822      	ldr	r2, [r4, #0]
 80006c8:	438a      	bics	r2, r1
 80006ca:	4313      	orrs	r3, r2
 80006cc:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80006ce:	f7ff ff01 	bl	80004d4 <HAL_RCC_GetSysClockFreq>
 80006d2:	68e3      	ldr	r3, [r4, #12]
 80006d4:	4a66      	ldr	r2, [pc, #408]	; (8000870 <HAL_RCC_OscConfig+0x324>)
 80006d6:	061b      	lsls	r3, r3, #24
 80006d8:	0f1b      	lsrs	r3, r3, #28
 80006da:	5cd3      	ldrb	r3, [r2, r3]
 80006dc:	40d8      	lsrs	r0, r3
 80006de:	4b65      	ldr	r3, [pc, #404]	; (8000874 <HAL_RCC_OscConfig+0x328>)
 80006e0:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fda6 	bl	8000234 <HAL_InitTick>
      if(status != HAL_OK)
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d100      	bne.n	80006ee <HAL_RCC_OscConfig+0x1a2>
 80006ec:	e746      	b.n	800057c <HAL_RCC_OscConfig+0x30>
 80006ee:	e733      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d019      	beq.n	8000728 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006f4:	2109      	movs	r1, #9
 80006f6:	6822      	ldr	r2, [r4, #0]
 80006f8:	438a      	bics	r2, r1
 80006fa:	4313      	orrs	r3, r2
 80006fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006fe:	f7ff fdcd 	bl	800029c <HAL_GetTick>
 8000702:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000704:	2204      	movs	r2, #4
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	4213      	tst	r3, r2
 800070a:	d007      	beq.n	800071c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800070c:	6862      	ldr	r2, [r4, #4]
 800070e:	692b      	ldr	r3, [r5, #16]
 8000710:	495b      	ldr	r1, [pc, #364]	; (8000880 <HAL_RCC_OscConfig+0x334>)
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	400a      	ands	r2, r1
 8000716:	4313      	orrs	r3, r2
 8000718:	6063      	str	r3, [r4, #4]
 800071a:	e72f      	b.n	800057c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800071c:	f7ff fdbe 	bl	800029c <HAL_GetTick>
 8000720:	1bc0      	subs	r0, r0, r7
 8000722:	2802      	cmp	r0, #2
 8000724:	d9ee      	bls.n	8000704 <HAL_RCC_OscConfig+0x1b8>
 8000726:	e788      	b.n	800063a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000728:	2201      	movs	r2, #1
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	4393      	bics	r3, r2
 800072e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000730:	f7ff fdb4 	bl	800029c <HAL_GetTick>
 8000734:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000736:	2204      	movs	r2, #4
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	4213      	tst	r3, r2
 800073c:	d100      	bne.n	8000740 <HAL_RCC_OscConfig+0x1f4>
 800073e:	e71d      	b.n	800057c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000740:	f7ff fdac 	bl	800029c <HAL_GetTick>
 8000744:	1bc0      	subs	r0, r0, r7
 8000746:	2802      	cmp	r0, #2
 8000748:	d9f5      	bls.n	8000736 <HAL_RCC_OscConfig+0x1ea>
 800074a:	e776      	b.n	800063a <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800074c:	69eb      	ldr	r3, [r5, #28]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d020      	beq.n	8000794 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	6822      	ldr	r2, [r4, #0]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4313      	orrs	r3, r2
 800075a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800075c:	f7ff fd9e 	bl	800029c <HAL_GetTick>
 8000760:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	4213      	tst	r3, r2
 800076a:	d00d      	beq.n	8000788 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800076c:	6863      	ldr	r3, [r4, #4]
 800076e:	4a3f      	ldr	r2, [pc, #252]	; (800086c <HAL_RCC_OscConfig+0x320>)
 8000770:	4013      	ands	r3, r2
 8000772:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000774:	4313      	orrs	r3, r2
 8000776:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000778:	6862      	ldr	r2, [r4, #4]
 800077a:	6a2b      	ldr	r3, [r5, #32]
 800077c:	0212      	lsls	r2, r2, #8
 800077e:	061b      	lsls	r3, r3, #24
 8000780:	0a12      	lsrs	r2, r2, #8
 8000782:	4313      	orrs	r3, r2
 8000784:	6063      	str	r3, [r4, #4]
 8000786:	e725      	b.n	80005d4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000788:	f7ff fd88 	bl	800029c <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9e7      	bls.n	8000762 <HAL_RCC_OscConfig+0x216>
 8000792:	e752      	b.n	800063a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	4a3b      	ldr	r2, [pc, #236]	; (8000884 <HAL_RCC_OscConfig+0x338>)
 8000798:	4013      	ands	r3, r2
 800079a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800079c:	f7ff fd7e 	bl	800029c <HAL_GetTick>
 80007a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	4213      	tst	r3, r2
 80007aa:	d100      	bne.n	80007ae <HAL_RCC_OscConfig+0x262>
 80007ac:	e712      	b.n	80005d4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007ae:	f7ff fd75 	bl	800029c <HAL_GetTick>
 80007b2:	1bc0      	subs	r0, r0, r7
 80007b4:	2802      	cmp	r0, #2
 80007b6:	d9f4      	bls.n	80007a2 <HAL_RCC_OscConfig+0x256>
 80007b8:	e73f      	b.n	800063a <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007ba:	696a      	ldr	r2, [r5, #20]
 80007bc:	2301      	movs	r3, #1
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d010      	beq.n	80007e4 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80007c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007c4:	4313      	orrs	r3, r2
 80007c6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007c8:	f7ff fd68 	bl	800029c <HAL_GetTick>
 80007cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80007ce:	2202      	movs	r2, #2
 80007d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007d2:	4213      	tst	r3, r2
 80007d4:	d000      	beq.n	80007d8 <HAL_RCC_OscConfig+0x28c>
 80007d6:	e701      	b.n	80005dc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d8:	f7ff fd60 	bl	800029c <HAL_GetTick>
 80007dc:	1bc0      	subs	r0, r0, r7
 80007de:	2802      	cmp	r0, #2
 80007e0:	d9f5      	bls.n	80007ce <HAL_RCC_OscConfig+0x282>
 80007e2:	e72a      	b.n	800063a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80007e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007e6:	439a      	bics	r2, r3
 80007e8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007ea:	f7ff fd57 	bl	800029c <HAL_GetTick>
 80007ee:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80007f0:	2202      	movs	r2, #2
 80007f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007f4:	4213      	tst	r3, r2
 80007f6:	d100      	bne.n	80007fa <HAL_RCC_OscConfig+0x2ae>
 80007f8:	e6f0      	b.n	80005dc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007fa:	f7ff fd4f 	bl	800029c <HAL_GetTick>
 80007fe:	1bc0      	subs	r0, r0, r7
 8000800:	2802      	cmp	r0, #2
 8000802:	d9f5      	bls.n	80007f0 <HAL_RCC_OscConfig+0x2a4>
 8000804:	e719      	b.n	800063a <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000806:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000808:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800080a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800080c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800080e:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000810:	421a      	tst	r2, r3
 8000812:	d104      	bne.n	800081e <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000816:	4313      	orrs	r3, r2
 8000818:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800081a:	2301      	movs	r3, #1
 800081c:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	4f19      	ldr	r7, [pc, #100]	; (8000888 <HAL_RCC_OscConfig+0x33c>)
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4213      	tst	r3, r2
 8000828:	d008      	beq.n	800083c <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	68ab      	ldr	r3, [r5, #8]
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	4293      	cmp	r3, r2
 8000832:	d12b      	bne.n	800088c <HAL_RCC_OscConfig+0x340>
 8000834:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000836:	4313      	orrs	r3, r2
 8000838:	6523      	str	r3, [r4, #80]	; 0x50
 800083a:	e04c      	b.n	80008d6 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	0052      	lsls	r2, r2, #1
 8000842:	4313      	orrs	r3, r2
 8000844:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000846:	f7ff fd29 	bl	800029c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800084e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000850:	9303      	str	r3, [sp, #12]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	9a03      	ldr	r2, [sp, #12]
 8000856:	4213      	tst	r3, r2
 8000858:	d1e7      	bne.n	800082a <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800085a:	f7ff fd1f 	bl	800029c <HAL_GetTick>
 800085e:	9b02      	ldr	r3, [sp, #8]
 8000860:	1ac0      	subs	r0, r0, r3
 8000862:	2864      	cmp	r0, #100	; 0x64
 8000864:	d9f5      	bls.n	8000852 <HAL_RCC_OscConfig+0x306>
 8000866:	e6e8      	b.n	800063a <HAL_RCC_OscConfig+0xee>
 8000868:	40021000 	.word	0x40021000
 800086c:	ffff1fff 	.word	0xffff1fff
 8000870:	08001150 	.word	0x08001150
 8000874:	20000000 	.word	0x20000000
 8000878:	fffeffff 	.word	0xfffeffff
 800087c:	fffbffff 	.word	0xfffbffff
 8000880:	ffffe0ff 	.word	0xffffe0ff
 8000884:	fffffeff 	.word	0xfffffeff
 8000888:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088c:	2b00      	cmp	r3, #0
 800088e:	d116      	bne.n	80008be <HAL_RCC_OscConfig+0x372>
 8000890:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000892:	4a6a      	ldr	r2, [pc, #424]	; (8000a3c <HAL_RCC_OscConfig+0x4f0>)
 8000894:	4013      	ands	r3, r2
 8000896:	6523      	str	r3, [r4, #80]	; 0x50
 8000898:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800089a:	4a69      	ldr	r2, [pc, #420]	; (8000a40 <HAL_RCC_OscConfig+0x4f4>)
 800089c:	4013      	ands	r3, r2
 800089e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80008a0:	f7ff fcfc 	bl	800029c <HAL_GetTick>
 80008a4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	4213      	tst	r3, r2
 80008ae:	d02a      	beq.n	8000906 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b0:	f7ff fcf4 	bl	800029c <HAL_GetTick>
 80008b4:	4b63      	ldr	r3, [pc, #396]	; (8000a44 <HAL_RCC_OscConfig+0x4f8>)
 80008b6:	1bc0      	subs	r0, r0, r7
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d9f4      	bls.n	80008a6 <HAL_RCC_OscConfig+0x35a>
 80008bc:	e6bd      	b.n	800063a <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008be:	21a0      	movs	r1, #160	; 0xa0
 80008c0:	00c9      	lsls	r1, r1, #3
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d10b      	bne.n	80008de <HAL_RCC_OscConfig+0x392>
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	430b      	orrs	r3, r1
 80008ce:	6523      	str	r3, [r4, #80]	; 0x50
 80008d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008d2:	431a      	orrs	r2, r3
 80008d4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80008d6:	f7ff fce1 	bl	800029c <HAL_GetTick>
 80008da:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008dc:	e00e      	b.n	80008fc <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008e0:	4a56      	ldr	r2, [pc, #344]	; (8000a3c <HAL_RCC_OscConfig+0x4f0>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	6523      	str	r3, [r4, #80]	; 0x50
 80008e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008e8:	4a55      	ldr	r2, [pc, #340]	; (8000a40 <HAL_RCC_OscConfig+0x4f4>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	e7a4      	b.n	8000838 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ee:	f7ff fcd5 	bl	800029c <HAL_GetTick>
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <HAL_RCC_OscConfig+0x4f8>)
 80008f4:	1bc0      	subs	r0, r0, r7
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d900      	bls.n	80008fc <HAL_RCC_OscConfig+0x3b0>
 80008fa:	e69e      	b.n	800063a <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	4213      	tst	r3, r2
 8000904:	d0f3      	beq.n	80008ee <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000906:	9b01      	ldr	r3, [sp, #4]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d000      	beq.n	800090e <HAL_RCC_OscConfig+0x3c2>
 800090c:	e66a      	b.n	80005e4 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 800090e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000910:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <HAL_RCC_OscConfig+0x4fc>)
 8000912:	4013      	ands	r3, r2
 8000914:	63a3      	str	r3, [r4, #56]	; 0x38
 8000916:	e665      	b.n	80005e4 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000918:	69a9      	ldr	r1, [r5, #24]
 800091a:	2301      	movs	r3, #1
 800091c:	4a4b      	ldr	r2, [pc, #300]	; (8000a4c <HAL_RCC_OscConfig+0x500>)
 800091e:	2900      	cmp	r1, #0
 8000920:	d018      	beq.n	8000954 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8000922:	68a1      	ldr	r1, [r4, #8]
 8000924:	4319      	orrs	r1, r3
 8000926:	60a1      	str	r1, [r4, #8]
 8000928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800092a:	430b      	orrs	r3, r1
 800092c:	6363      	str	r3, [r4, #52]	; 0x34
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	6a11      	ldr	r1, [r2, #32]
 8000932:	019b      	lsls	r3, r3, #6
 8000934:	430b      	orrs	r3, r1
 8000936:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000938:	f7ff fcb0 	bl	800029c <HAL_GetTick>
 800093c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800093e:	2202      	movs	r2, #2
 8000940:	68a3      	ldr	r3, [r4, #8]
 8000942:	4213      	tst	r3, r2
 8000944:	d000      	beq.n	8000948 <HAL_RCC_OscConfig+0x3fc>
 8000946:	e651      	b.n	80005ec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000948:	f7ff fca8 	bl	800029c <HAL_GetTick>
 800094c:	1bc0      	subs	r0, r0, r7
 800094e:	2802      	cmp	r0, #2
 8000950:	d9f5      	bls.n	800093e <HAL_RCC_OscConfig+0x3f2>
 8000952:	e672      	b.n	800063a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000954:	68a1      	ldr	r1, [r4, #8]
 8000956:	4399      	bics	r1, r3
 8000958:	60a1      	str	r1, [r4, #8]
 800095a:	6a13      	ldr	r3, [r2, #32]
 800095c:	493c      	ldr	r1, [pc, #240]	; (8000a50 <HAL_RCC_OscConfig+0x504>)
 800095e:	400b      	ands	r3, r1
 8000960:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000962:	f7ff fc9b 	bl	800029c <HAL_GetTick>
 8000966:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000968:	2202      	movs	r2, #2
 800096a:	68a3      	ldr	r3, [r4, #8]
 800096c:	4213      	tst	r3, r2
 800096e:	d100      	bne.n	8000972 <HAL_RCC_OscConfig+0x426>
 8000970:	e63c      	b.n	80005ec <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000972:	f7ff fc93 	bl	800029c <HAL_GetTick>
 8000976:	1bc0      	subs	r0, r0, r7
 8000978:	2802      	cmp	r0, #2
 800097a:	d9f5      	bls.n	8000968 <HAL_RCC_OscConfig+0x41c>
 800097c:	e65d      	b.n	800063a <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800097e:	2e0c      	cmp	r6, #12
 8000980:	d043      	beq.n	8000a0a <HAL_RCC_OscConfig+0x4be>
 8000982:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <HAL_RCC_OscConfig+0x508>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000984:	2b02      	cmp	r3, #2
 8000986:	d12e      	bne.n	80009e6 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8000988:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800098a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800098c:	4013      	ands	r3, r2
 800098e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000990:	f7ff fc84 	bl	800029c <HAL_GetTick>
 8000994:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000996:	04b6      	lsls	r6, r6, #18
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	4233      	tst	r3, r6
 800099c:	d11d      	bne.n	80009da <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800099e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80009a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80009a2:	68e2      	ldr	r2, [r4, #12]
 80009a4:	430b      	orrs	r3, r1
 80009a6:	492c      	ldr	r1, [pc, #176]	; (8000a58 <HAL_RCC_OscConfig+0x50c>)
 80009a8:	400a      	ands	r2, r1
 80009aa:	4313      	orrs	r3, r2
 80009ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80009ae:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	6822      	ldr	r2, [r4, #0]
 80009b8:	045b      	lsls	r3, r3, #17
 80009ba:	4313      	orrs	r3, r2
 80009bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009be:	f7ff fc6d 	bl	800029c <HAL_GetTick>
 80009c2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80009c4:	04ad      	lsls	r5, r5, #18
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	422b      	tst	r3, r5
 80009ca:	d000      	beq.n	80009ce <HAL_RCC_OscConfig+0x482>
 80009cc:	e612      	b.n	80005f4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ce:	f7ff fc65 	bl	800029c <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9f6      	bls.n	80009c6 <HAL_RCC_OscConfig+0x47a>
 80009d8:	e62f      	b.n	800063a <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009da:	f7ff fc5f 	bl	800029c <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9d9      	bls.n	8000998 <HAL_RCC_OscConfig+0x44c>
 80009e4:	e629      	b.n	800063a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80009e6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009e8:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80009ea:	4013      	ands	r3, r2
 80009ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ee:	f7ff fc55 	bl	800029c <HAL_GetTick>
 80009f2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009f4:	04ad      	lsls	r5, r5, #18
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	422b      	tst	r3, r5
 80009fa:	d100      	bne.n	80009fe <HAL_RCC_OscConfig+0x4b2>
 80009fc:	e5fa      	b.n	80005f4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fe:	f7ff fc4d 	bl	800029c <HAL_GetTick>
 8000a02:	1b80      	subs	r0, r0, r6
 8000a04:	2802      	cmp	r0, #2
 8000a06:	d9f6      	bls.n	80009f6 <HAL_RCC_OscConfig+0x4aa>
 8000a08:	e617      	b.n	800063a <HAL_RCC_OscConfig+0xee>
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a0a:	2280      	movs	r2, #128	; 0x80
      pll_config = RCC->CFGR;
 8000a0c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a0e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000a10:	0252      	lsls	r2, r2, #9
 8000a12:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000a14:	2001      	movs	r0, #1
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a16:	428a      	cmp	r2, r1
 8000a18:	d000      	beq.n	8000a1c <HAL_RCC_OscConfig+0x4d0>
 8000a1a:	e59d      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a1c:	22f0      	movs	r2, #240	; 0xf0
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a1e:	6b29      	ldr	r1, [r5, #48]	; 0x30
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a20:	0392      	lsls	r2, r2, #14
 8000a22:	401a      	ands	r2, r3
      if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a24:	428a      	cmp	r2, r1
 8000a26:	d000      	beq.n	8000a2a <HAL_RCC_OscConfig+0x4de>
 8000a28:	e596      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
         (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000a2a:	20c0      	movs	r0, #192	; 0xc0
 8000a2c:	0400      	lsls	r0, r0, #16
 8000a2e:	4003      	ands	r3, r0
         (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a30:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000a32:	1a18      	subs	r0, r3, r0
 8000a34:	1e43      	subs	r3, r0, #1
 8000a36:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000a38:	b2c0      	uxtb	r0, r0
 8000a3a:	e58d      	b.n	8000558 <HAL_RCC_OscConfig+0xc>
 8000a3c:	fffffeff 	.word	0xfffffeff
 8000a40:	fffffbff 	.word	0xfffffbff
 8000a44:	00001388 	.word	0x00001388
 8000a48:	efffffff 	.word	0xefffffff
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	ffffdfff 	.word	0xffffdfff
 8000a54:	feffffff 	.word	0xfeffffff
 8000a58:	ff02ffff 	.word	0xff02ffff

08000a5c <HAL_RCC_ClockConfig>:
{
 8000a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a5e:	1e06      	subs	r6, r0, #0
 8000a60:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000a62:	d101      	bne.n	8000a68 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000a64:	2001      	movs	r0, #1
}
 8000a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4c51      	ldr	r4, [pc, #324]	; (8000bb0 <HAL_RCC_ClockConfig+0x154>)
 8000a6c:	9901      	ldr	r1, [sp, #4]
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	4013      	ands	r3, r2
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d327      	bcc.n	8000ac6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a76:	6832      	ldr	r2, [r6, #0]
 8000a78:	0793      	lsls	r3, r2, #30
 8000a7a:	d42f      	bmi.n	8000adc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a7c:	07d3      	lsls	r3, r2, #31
 8000a7e:	d435      	bmi.n	8000aec <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a80:	2301      	movs	r3, #1
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	9901      	ldr	r1, [sp, #4]
 8000a86:	401a      	ands	r2, r3
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	d200      	bcs.n	8000a8e <HAL_RCC_ClockConfig+0x32>
 8000a8c:	e081      	b.n	8000b92 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a8e:	6832      	ldr	r2, [r6, #0]
 8000a90:	4c48      	ldr	r4, [pc, #288]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
 8000a92:	0753      	lsls	r3, r2, #29
 8000a94:	d500      	bpl.n	8000a98 <HAL_RCC_ClockConfig+0x3c>
 8000a96:	e084      	b.n	8000ba2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a98:	0713      	lsls	r3, r2, #28
 8000a9a:	d506      	bpl.n	8000aaa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a9c:	68e2      	ldr	r2, [r4, #12]
 8000a9e:	6933      	ldr	r3, [r6, #16]
 8000aa0:	4945      	ldr	r1, [pc, #276]	; (8000bb8 <HAL_RCC_ClockConfig+0x15c>)
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aaa:	f7ff fd13 	bl	80004d4 <HAL_RCC_GetSysClockFreq>
 8000aae:	68e3      	ldr	r3, [r4, #12]
 8000ab0:	4a42      	ldr	r2, [pc, #264]	; (8000bbc <HAL_RCC_ClockConfig+0x160>)
 8000ab2:	061b      	lsls	r3, r3, #24
 8000ab4:	0f1b      	lsrs	r3, r3, #28
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	40d8      	lsrs	r0, r3
 8000aba:	4b41      	ldr	r3, [pc, #260]	; (8000bc0 <HAL_RCC_ClockConfig+0x164>)
 8000abc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fbb8 	bl	8000234 <HAL_InitTick>
 8000ac4:	e7cf      	b.n	8000a66 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	9901      	ldr	r1, [sp, #4]
 8000aca:	4393      	bics	r3, r2
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	9a01      	ldr	r2, [sp, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d1c4      	bne.n	8000a64 <HAL_RCC_ClockConfig+0x8>
 8000ada:	e7cc      	b.n	8000a76 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000adc:	20f0      	movs	r0, #240	; 0xf0
 8000ade:	4935      	ldr	r1, [pc, #212]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
 8000ae0:	68cb      	ldr	r3, [r1, #12]
 8000ae2:	4383      	bics	r3, r0
 8000ae4:	68b0      	ldr	r0, [r6, #8]
 8000ae6:	4303      	orrs	r3, r0
 8000ae8:	60cb      	str	r3, [r1, #12]
 8000aea:	e7c7      	b.n	8000a7c <HAL_RCC_ClockConfig+0x20>
 8000aec:	4d31      	ldr	r5, [pc, #196]	; (8000bb4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aee:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000af0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af2:	2a02      	cmp	r2, #2
 8000af4:	d119      	bne.n	8000b2a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000af6:	039b      	lsls	r3, r3, #14
 8000af8:	d5b4      	bpl.n	8000a64 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000afa:	2103      	movs	r1, #3
 8000afc:	68eb      	ldr	r3, [r5, #12]
 8000afe:	438b      	bics	r3, r1
 8000b00:	4313      	orrs	r3, r2
 8000b02:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000b04:	f7ff fbca 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b08:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b0a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d119      	bne.n	8000b44 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b10:	220c      	movs	r2, #12
 8000b12:	68eb      	ldr	r3, [r5, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d0b2      	beq.n	8000a80 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1a:	f7ff fbbf 	bl	800029c <HAL_GetTick>
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_RCC_ClockConfig+0x168>)
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d9f4      	bls.n	8000b10 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000b26:	2003      	movs	r0, #3
 8000b28:	e79d      	b.n	8000a66 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b2a:	2a03      	cmp	r2, #3
 8000b2c:	d102      	bne.n	8000b34 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	d4e3      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x9e>
 8000b32:	e797      	b.n	8000a64 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b34:	2a01      	cmp	r2, #1
 8000b36:	d102      	bne.n	8000b3e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b38:	075b      	lsls	r3, r3, #29
 8000b3a:	d4de      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x9e>
 8000b3c:	e792      	b.n	8000a64 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b3e:	059b      	lsls	r3, r3, #22
 8000b40:	d4db      	bmi.n	8000afa <HAL_RCC_ClockConfig+0x9e>
 8000b42:	e78f      	b.n	8000a64 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d10b      	bne.n	8000b60 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b48:	220c      	movs	r2, #12
 8000b4a:	68eb      	ldr	r3, [r5, #12]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d096      	beq.n	8000a80 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b52:	f7ff fba3 	bl	800029c <HAL_GetTick>
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_RCC_ClockConfig+0x168>)
 8000b58:	1bc0      	subs	r0, r0, r7
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d9f4      	bls.n	8000b48 <HAL_RCC_ClockConfig+0xec>
 8000b5e:	e7e2      	b.n	8000b26 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d010      	beq.n	8000b86 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b64:	220c      	movs	r2, #12
 8000b66:	68eb      	ldr	r3, [r5, #12]
 8000b68:	4213      	tst	r3, r2
 8000b6a:	d089      	beq.n	8000a80 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6c:	f7ff fb96 	bl	800029c <HAL_GetTick>
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_RCC_ClockConfig+0x168>)
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d9f5      	bls.n	8000b64 <HAL_RCC_ClockConfig+0x108>
 8000b78:	e7d5      	b.n	8000b26 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7a:	f7ff fb8f 	bl	800029c <HAL_GetTick>
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_RCC_ClockConfig+0x168>)
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d8cf      	bhi.n	8000b26 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b86:	220c      	movs	r2, #12
 8000b88:	68eb      	ldr	r3, [r5, #12]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d1f4      	bne.n	8000b7a <HAL_RCC_ClockConfig+0x11e>
 8000b90:	e776      	b.n	8000a80 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	439a      	bics	r2, r3
 8000b96:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	421a      	tst	r2, r3
 8000b9c:	d000      	beq.n	8000ba0 <HAL_RCC_ClockConfig+0x144>
 8000b9e:	e761      	b.n	8000a64 <HAL_RCC_ClockConfig+0x8>
 8000ba0:	e775      	b.n	8000a8e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba2:	68e3      	ldr	r3, [r4, #12]
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <HAL_RCC_ClockConfig+0x16c>)
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	68f1      	ldr	r1, [r6, #12]
 8000baa:	430b      	orrs	r3, r1
 8000bac:	60e3      	str	r3, [r4, #12]
 8000bae:	e773      	b.n	8000a98 <HAL_RCC_ClockConfig+0x3c>
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	ffffc7ff 	.word	0xffffc7ff
 8000bbc:	08001150 	.word	0x08001150
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	00001388 	.word	0x00001388
 8000bc8:	fffff8ff 	.word	0xfffff8ff

08000bcc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bcc:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8000bce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bd0:	05d2      	lsls	r2, r2, #23
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d008      	beq.n	8000be8 <TIM_Base_SetConfig+0x1c>
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <TIM_Base_SetConfig+0x60>)
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d005      	beq.n	8000be8 <TIM_Base_SetConfig+0x1c>
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <TIM_Base_SetConfig+0x64>)
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d002      	beq.n	8000be8 <TIM_Base_SetConfig+0x1c>
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <TIM_Base_SetConfig+0x68>)
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d114      	bne.n	8000c12 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000be8:	2270      	movs	r2, #112	; 0x70
 8000bea:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8000bec:	684a      	ldr	r2, [r1, #4]
 8000bee:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	05d2      	lsls	r2, r2, #23
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d008      	beq.n	8000c0a <TIM_Base_SetConfig+0x3e>
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <TIM_Base_SetConfig+0x60>)
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d005      	beq.n	8000c0a <TIM_Base_SetConfig+0x3e>
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <TIM_Base_SetConfig+0x64>)
 8000c00:	4290      	cmp	r0, r2
 8000c02:	d002      	beq.n	8000c0a <TIM_Base_SetConfig+0x3e>
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <TIM_Base_SetConfig+0x68>)
 8000c06:	4290      	cmp	r0, r2
 8000c08:	d103      	bne.n	8000c12 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <TIM_Base_SetConfig+0x6c>)
 8000c0c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c0e:	68ca      	ldr	r2, [r1, #12]
 8000c10:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	4393      	bics	r3, r2
 8000c16:	690a      	ldr	r2, [r1, #16]
 8000c18:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000c1a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c1c:	688b      	ldr	r3, [r1, #8]
 8000c1e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000c20:	680b      	ldr	r3, [r1, #0]
 8000c22:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000c24:	2301      	movs	r3, #1
 8000c26:	6143      	str	r3, [r0, #20]
}
 8000c28:	4770      	bx	lr
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40011400 	.word	0x40011400
 8000c38:	fffffcff 	.word	0xfffffcff

08000c3c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c3c:	2201      	movs	r2, #1
{
 8000c3e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000c40:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c42:	6a03      	ldr	r3, [r0, #32]
 8000c44:	4393      	bics	r3, r2
 8000c46:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000c48:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000c4a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c4c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000c4e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000c50:	680d      	ldr	r5, [r1, #0]
 8000c52:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000c54:	2502      	movs	r5, #2
 8000c56:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000c58:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c5a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c5c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000c5e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8000c60:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8000c62:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c64:	6203      	str	r3, [r0, #32]
}
 8000c66:	bd30      	pop	{r4, r5, pc}

08000c68 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c68:	2210      	movs	r2, #16
 8000c6a:	6a03      	ldr	r3, [r0, #32]
{
 8000c6c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c6e:	4393      	bics	r3, r2
 8000c70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c74:	4c09      	ldr	r4, [pc, #36]	; (8000c9c <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8000c76:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000c78:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000c7a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c7c:	680a      	ldr	r2, [r1, #0]
 8000c7e:	0212      	lsls	r2, r2, #8
 8000c80:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8000c82:	2420      	movs	r4, #32
 8000c84:	43a3      	bics	r3, r4
 8000c86:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c88:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c8a:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c8c:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c8e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000c90:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000c92:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8000c94:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c96:	6203      	str	r3, [r0, #32]
}
 8000c98:	bd30      	pop	{r4, r5, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	ffff8cff 	.word	0xffff8cff

08000ca0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000ca0:	231f      	movs	r3, #31
{
 8000ca2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000ca4:	2401      	movs	r4, #1
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000caa:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8000cac:	6a03      	ldr	r3, [r0, #32]
 8000cae:	43a3      	bics	r3, r4
 8000cb0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000cb2:	6a03      	ldr	r3, [r0, #32]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	6202      	str	r2, [r0, #32]
}
 8000cb8:	bd10      	pop	{r4, pc}

08000cba <HAL_TIM_PWM_Init>:
{
 8000cba:	b570      	push	{r4, r5, r6, lr}
 8000cbc:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
  if (htim == NULL)
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d014      	beq.n	8000cee <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000cc4:	0025      	movs	r5, r4
 8000cc6:	3539      	adds	r5, #57	; 0x39
 8000cc8:	782b      	ldrb	r3, [r5, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d105      	bne.n	8000cdc <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000cd0:	0022      	movs	r2, r4
 8000cd2:	3238      	adds	r2, #56	; 0x38
 8000cd4:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f000 f96e 	bl	8000fb8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000cdc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cde:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000ce0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ce2:	1d21      	adds	r1, r4, #4
 8000ce4:	f7ff ff72 	bl	8000bcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000ce8:	2301      	movs	r3, #1
  return HAL_OK;
 8000cea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000cec:	702b      	strb	r3, [r5, #0]
}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}

08000cf0 <HAL_TIM_IC_Start>:
{
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6800      	ldr	r0, [r0, #0]
 8000cf8:	f7ff ffd2 	bl	8000ca0 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d04:	2a06      	cmp	r2, #6
 8000d06:	d003      	beq.n	8000d10 <HAL_TIM_IC_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	6819      	ldr	r1, [r3, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	bd10      	pop	{r4, pc}

08000d14 <HAL_TIM_PWM_Start>:
 8000d14:	b510      	push	{r4, lr}
 8000d16:	f7ff ffeb 	bl	8000cf0 <HAL_TIM_IC_Start>
 8000d1a:	bd10      	pop	{r4, pc}

08000d1c <HAL_TIM_PWM_ConfigChannel>:
{
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000d1e:	0005      	movs	r5, r0
 8000d20:	2302      	movs	r3, #2
 8000d22:	3538      	adds	r5, #56	; 0x38
{
 8000d24:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8000d26:	7829      	ldrb	r1, [r5, #0]
{
 8000d28:	0007      	movs	r7, r0
  __HAL_LOCK(htim);
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2901      	cmp	r1, #1
 8000d2e:	d025      	beq.n	8000d7c <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8000d30:	003e      	movs	r6, r7
  __HAL_LOCK(htim);
 8000d32:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d34:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8000d36:	7029      	strb	r1, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000d38:	7033      	strb	r3, [r6, #0]
  switch (Channel)
 8000d3a:	2a0c      	cmp	r2, #12
 8000d3c:	d81a      	bhi.n	8000d74 <HAL_TIM_PWM_ConfigChannel+0x58>
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f7ff f9e2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000d44:	18181807 	.word	0x18181807
 8000d48:	1818181d 	.word	0x1818181d
 8000d4c:	1818182f 	.word	0x1818182f
 8000d50:	52          	.byte	0x52
 8000d51:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d52:	0021      	movs	r1, r4
 8000d54:	6838      	ldr	r0, [r7, #0]
 8000d56:	f7ff ff71 	bl	8000c3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6999      	ldr	r1, [r3, #24]
 8000d60:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d62:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d64:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d66:	699a      	ldr	r2, [r3, #24]
 8000d68:	438a      	bics	r2, r1
 8000d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d70:	430a      	orrs	r2, r1
 8000d72:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d74:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d76:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d78:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000d7a:	7028      	strb	r0, [r5, #0]
}
 8000d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d7e:	0021      	movs	r1, r4
 8000d80:	6838      	ldr	r0, [r7, #0]
 8000d82:	f7ff ff71 	bl	8000c68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	6999      	ldr	r1, [r3, #24]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d92:	699a      	ldr	r2, [r3, #24]
 8000d94:	4926      	ldr	r1, [pc, #152]	; (8000e30 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8000d96:	400a      	ands	r2, r1
 8000d98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000d9a:	68e2      	ldr	r2, [r4, #12]
 8000d9c:	6999      	ldr	r1, [r3, #24]
 8000d9e:	0212      	lsls	r2, r2, #8
 8000da0:	e7e6      	b.n	8000d70 <HAL_TIM_PWM_ConfigChannel+0x54>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000da2:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000da4:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000da6:	4923      	ldr	r1, [pc, #140]	; (8000e34 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8000da8:	6a1a      	ldr	r2, [r3, #32]
 8000daa:	400a      	ands	r2, r1
 8000dac:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000dae:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000db0:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000db2:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000db4:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8000db6:	6820      	ldr	r0, [r4, #0]
 8000db8:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 8000dbc:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dbe:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000dc0:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dc2:	0212      	lsls	r2, r2, #8
  TIMx->CCMR2 = tmpccmrx;
 8000dc4:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000dc6:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dc8:	4302      	orrs	r2, r0
  TIMx->CCR3 = OC_Config->Pulse;
 8000dca:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8000dcc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000dce:	2208      	movs	r2, #8
 8000dd0:	69d9      	ldr	r1, [r3, #28]
 8000dd2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000dd4:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000dd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	438a      	bics	r2, r1
 8000ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000de2:	430a      	orrs	r2, r1
 8000de4:	61da      	str	r2, [r3, #28]
      break;
 8000de6:	e7c5      	b.n	8000d74 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000de8:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000dea:	4914      	ldr	r1, [pc, #80]	; (8000e3c <HAL_TIM_PWM_ConfigChannel+0x120>)
 8000dec:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <HAL_TIM_PWM_ConfigChannel+0x124>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000df0:	400a      	ands	r2, r1
 8000df2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8000df4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8000df6:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000df8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000dfa:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dfc:	6820      	ldr	r0, [r4, #0]
 8000dfe:	0200      	lsls	r0, r0, #8
 8000e00:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <HAL_TIM_PWM_ConfigChannel+0x128>)
 8000e04:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e06:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8000e08:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e0a:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8000e0c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000e0e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e10:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8000e12:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8000e14:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	69d9      	ldr	r1, [r3, #28]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	4903      	ldr	r1, [pc, #12]	; (8000e30 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8000e24:	400a      	ands	r2, r1
 8000e26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000e28:	68e2      	ldr	r2, [r4, #12]
 8000e2a:	69d9      	ldr	r1, [r3, #28]
 8000e2c:	0212      	lsls	r2, r2, #8
 8000e2e:	e7d8      	b.n	8000de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8000e30:	fffffbff 	.word	0xfffffbff
 8000e34:	fffffeff 	.word	0xfffffeff
 8000e38:	fffffdff 	.word	0xfffffdff
 8000e3c:	ffffefff 	.word	0xffffefff
 8000e40:	ffff8cff 	.word	0xffff8cff
 8000e44:	ffffdfff 	.word	0xffffdfff

08000e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000e4a:	0004      	movs	r4, r0
 8000e4c:	3438      	adds	r4, #56	; 0x38
 8000e4e:	7822      	ldrb	r2, [r4, #0]
{
 8000e50:	0003      	movs	r3, r0
 8000e52:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	d013      	beq.n	8000e80 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e58:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8000e5a:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8000e5c:	3539      	adds	r5, #57	; 0x39
 8000e5e:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000e64:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000e66:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000e68:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000e6a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000e6c:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000e6e:	2680      	movs	r6, #128	; 0x80
 8000e70:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000e72:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000e74:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8000e76:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000e78:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8000e7a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e7c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8000e7e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b530      	push	{r4, r5, lr}
 8000e86:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e88:	2238      	movs	r2, #56	; 0x38
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	a806      	add	r0, sp, #24
 8000e8e:	f000 f94b 	bl	8001128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e92:	2214      	movs	r2, #20
 8000e94:	2100      	movs	r1, #0
 8000e96:	a801      	add	r0, sp, #4
 8000e98:	f000 f946 	bl	8001128 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	4913      	ldr	r1, [pc, #76]	; (8000eec <SystemClock_Config+0x68>)
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <SystemClock_Config+0x6c>)
 8000ea0:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000eba:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000ec0:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000ec6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eca:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f7ff fb3e 	bl	800054c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed2:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	3b0c      	subs	r3, #12
 8000eda:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee2:	f7ff fdbb 	bl	8000a5c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000ee6:	b015      	add	sp, #84	; 0x54
 8000ee8:	bd30      	pop	{r4, r5, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	ffffe7ff 	.word	0xffffe7ff

08000ef4 <main>:
{
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	b088      	sub	sp, #32
  HAL_Init();
 8000ef8:	f7ff f9b4 	bl	8000264 <HAL_Init>
  SystemClock_Config();
 8000efc:	f7ff ffc2 	bl	8000e84 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	2001      	movs	r0, #1
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	2610      	movs	r6, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <main+0x98>)
  htim2.Init.Prescaler = 0;
 8000f06:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f0a:	4301      	orrs	r1, r0
 8000f0c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000f0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4003      	ands	r3, r0
 8000f14:	9301      	str	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	2208      	movs	r2, #8
 8000f18:	a802      	add	r0, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	9b01      	ldr	r3, [sp, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	f000 f904 	bl	8001128 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f20:	0032      	movs	r2, r6
 8000f22:	2100      	movs	r1, #0
 8000f24:	a804      	add	r0, sp, #16
 8000f26:	f000 f8ff 	bl	8001128 <memset>
  htim2.Instance = TIM2;
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	4c18      	ldr	r4, [pc, #96]	; (8000f90 <main+0x9c>)
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = 31999;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <main+0xa0>)
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f34:	0020      	movs	r0, r4
  htim2.Init.Period = 31999;
 8000f36:	60e3      	str	r3, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f38:	60a6      	str	r6, [r4, #8]
  htim2.Init.Prescaler = 0;
 8000f3a:	6065      	str	r5, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3c:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f40:	f7ff febb 	bl	8000cba <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f44:	a902      	add	r1, sp, #8
 8000f46:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4c:	f7ff ff7c 	bl	8000e48 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 15999;
 8000f52:	4e11      	ldr	r6, [pc, #68]	; (8000f98 <main+0xa4>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	a904      	add	r1, sp, #16
 8000f56:	002a      	movs	r2, r5
 8000f58:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	9304      	str	r3, [sp, #16]
  sConfigOC.Pulse = 15999;
 8000f5c:	9605      	str	r6, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	9506      	str	r5, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	f7ff fedb 	bl	8000d1c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000f66:	0020      	movs	r0, r4
 8000f68:	f000 f834 	bl	8000fd4 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f6c:	0029      	movs	r1, r5
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f7ff fed0 	bl	8000d14 <HAL_TIM_PWM_Start>
    if(pulse > 0)
 8000f74:	2e00      	cmp	r6, #0
 8000f76:	dd06      	ble.n	8000f86 <main+0x92>
      pulse -= 160;
 8000f78:	3ea0      	subs	r6, #160	; 0xa0
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000f7a:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(20);
 8000f7c:	2014      	movs	r0, #20
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000f7e:	635e      	str	r6, [r3, #52]	; 0x34
    HAL_Delay(20);
 8000f80:	f7ff f992 	bl	80002a8 <HAL_Delay>
    if(pulse > 0)
 8000f84:	e7f6      	b.n	8000f74 <main+0x80>
      pulse = 15999;
 8000f86:	4e04      	ldr	r6, [pc, #16]	; (8000f98 <main+0xa4>)
 8000f88:	e7f7      	b.n	8000f7a <main+0x86>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	20000024 	.word	0x20000024
 8000f94:	00007cff 	.word	0x00007cff
 8000f98:	00003e7f 	.word	0x00003e7f

08000f9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_MspInit+0x18>)
 8000fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000faa:	0552      	lsls	r2, r2, #21
 8000fac:	430a      	orrs	r2, r1
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	6802      	ldr	r2, [r0, #0]
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d104      	bne.n	8000fcc <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <HAL_TIM_PWM_MspInit+0x18>)
 8000fc6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fcc:	4770      	bx	lr
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	2214      	movs	r2, #20
 8000fdc:	2100      	movs	r1, #0
 8000fde:	a801      	add	r0, sp, #4
 8000fe0:	f000 f8a2 	bl	8001128 <memset>
  if(htim->Instance==TIM2)
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d113      	bne.n	8001016 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2001      	movs	r0, #1
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_TIM_MspPostInit+0x48>)
 8000ff2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000ff4:	4301      	orrs	r1, r0
 8000ff6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000ff8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4003      	ands	r3, r0
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001002:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001006:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	3b1e      	subs	r3, #30
 800100a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800100e:	3303      	adds	r3, #3
 8001010:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f7ff f9a3 	bl	800035c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001016:	b006      	add	sp, #24
 8001018:	bd10      	pop	{r4, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40021000 	.word	0x40021000

08001020 <NMI_Handler>:
 8001020:	4770      	bx	lr

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler>

08001024 <SVC_Handler>:
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102a:	f7ff f92f 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102e:	bd10      	pop	{r4, pc}

08001030 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <SystemInit+0x44>)
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <SystemInit+0x48>)
 8001040:	400a      	ands	r2, r1
 8001042:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <SystemInit+0x4c>)
 8001048:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800104a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800104c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	438a      	bics	r2, r1
 8001052:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	490a      	ldr	r1, [pc, #40]	; (8001080 <SystemInit+0x50>)
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	4909      	ldr	r1, [pc, #36]	; (8001084 <SystemInit+0x54>)
 8001060:	400a      	ands	r2, r1
 8001062:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <SystemInit+0x58>)
 800106c:	0512      	lsls	r2, r2, #20
 800106e:	609a      	str	r2, [r3, #8]
#endif
}
 8001070:	4770      	bx	lr
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	88ff400c 	.word	0x88ff400c
 800107c:	fef6fff6 	.word	0xfef6fff6
 8001080:	fffbffff 	.word	0xfffbffff
 8001084:	ff02ffff 	.word	0xff02ffff
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800108e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001090:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001092:	e003      	b.n	800109c <LoopCopyDataInit>

08001094 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001096:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001098:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800109a:	3104      	adds	r1, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopForever+0xa>)
  ldr  r3, =_edata
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopForever+0xe>)
  adds  r2, r0, r1
 80010a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a4:	d3f6      	bcc.n	8001094 <CopyDataInit>
  ldr  r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopForever+0x12>)
  b  LoopFillZerobss
 80010a8:	e002      	b.n	80010b0 <LoopFillZerobss>

080010aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80010aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80010ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ae:	3204      	adds	r2, #4

080010b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LoopForever+0x16>)
  cmp  r2, r3
 80010b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b4:	d3f9      	bcc.n	80010aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010b6:	f7ff ffbb 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f000 f811 	bl	80010e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff ff19 	bl	8000ef4 <main>

080010c2 <LoopForever>:

LoopForever:
    b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
   ldr   r0, =_estack
 80010c4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80010c8:	08001174 	.word	0x08001174
  ldr  r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80010d4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80010d8:	20000060 	.word	0x20000060

080010dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_COMP_IRQHandler>
	...

080010e0 <__libc_init_array>:
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	2600      	movs	r6, #0
 80010e4:	4d0c      	ldr	r5, [pc, #48]	; (8001118 <__libc_init_array+0x38>)
 80010e6:	4c0d      	ldr	r4, [pc, #52]	; (800111c <__libc_init_array+0x3c>)
 80010e8:	1b64      	subs	r4, r4, r5
 80010ea:	10a4      	asrs	r4, r4, #2
 80010ec:	42a6      	cmp	r6, r4
 80010ee:	d109      	bne.n	8001104 <__libc_init_array+0x24>
 80010f0:	2600      	movs	r6, #0
 80010f2:	f000 f821 	bl	8001138 <_init>
 80010f6:	4d0a      	ldr	r5, [pc, #40]	; (8001120 <__libc_init_array+0x40>)
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <__libc_init_array+0x44>)
 80010fa:	1b64      	subs	r4, r4, r5
 80010fc:	10a4      	asrs	r4, r4, #2
 80010fe:	42a6      	cmp	r6, r4
 8001100:	d105      	bne.n	800110e <__libc_init_array+0x2e>
 8001102:	bd70      	pop	{r4, r5, r6, pc}
 8001104:	00b3      	lsls	r3, r6, #2
 8001106:	58eb      	ldr	r3, [r5, r3]
 8001108:	4798      	blx	r3
 800110a:	3601      	adds	r6, #1
 800110c:	e7ee      	b.n	80010ec <__libc_init_array+0xc>
 800110e:	00b3      	lsls	r3, r6, #2
 8001110:	58eb      	ldr	r3, [r5, r3]
 8001112:	4798      	blx	r3
 8001114:	3601      	adds	r6, #1
 8001116:	e7f2      	b.n	80010fe <__libc_init_array+0x1e>
 8001118:	0800116c 	.word	0x0800116c
 800111c:	0800116c 	.word	0x0800116c
 8001120:	0800116c 	.word	0x0800116c
 8001124:	08001170 	.word	0x08001170

08001128 <memset>:
 8001128:	0003      	movs	r3, r0
 800112a:	1882      	adds	r2, r0, r2
 800112c:	4293      	cmp	r3, r2
 800112e:	d100      	bne.n	8001132 <memset+0xa>
 8001130:	4770      	bx	lr
 8001132:	7019      	strb	r1, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	e7f9      	b.n	800112c <memset+0x4>

08001138 <_init>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr

08001144 <_fini>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr
